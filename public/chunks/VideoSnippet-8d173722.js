
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
'use strict';

var main = require('./main-3b20ca96.js');

/* src/components/VideoSnippet.svelte generated by Svelte v3.47.0 */

const file = "src/components/VideoSnippet.svelte";

// (6:2) {#if snippet}
function create_if_block(ctx) {
	let div;
	let img;
	let img_alt_value;
	let img_src_value;
	let img_width_value;
	let img_height_value;
	let t0;
	let h1;
	let t1_value = /*snippet*/ ctx[0].title + "";
	let t1;
	let t2;
	let p;
	let t3_value = /*snippet*/ ctx[0].description + "";
	let t3;

	const block = {
		c: function create() {
			div = main.element("div");
			img = main.element("img");
			t0 = main.space();
			h1 = main.element("h1");
			t1 = main.text(t1_value);
			t2 = main.space();
			p = main.element("p");
			t3 = main.text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			div = main.claim_element(nodes, "DIV", { class: true });
			var div_nodes = main.children(div);

			img = main.claim_element(div_nodes, "IMG", {
				alt: true,
				src: true,
				width: true,
				height: true,
				class: true
			});

			div_nodes.forEach(main.detach_dev);
			t0 = main.claim_space(nodes);
			h1 = main.claim_element(nodes, "H1", { class: true });
			var h1_nodes = main.children(h1);
			t1 = main.claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(main.detach_dev);
			t2 = main.claim_space(nodes);
			p = main.claim_element(nodes, "P", { class: true });
			var p_nodes = main.children(p);
			t3 = main.claim_text(p_nodes, t3_value);
			p_nodes.forEach(main.detach_dev);
			this.h();
		},
		h: function hydrate() {
			main.attr_dev(img, "alt", img_alt_value = /*snippet*/ ctx[0].title);
			if (!main.src_url_equal(img.src, img_src_value = /*snippet*/ ctx[0].thumbnails.medium.url)) main.attr_dev(img, "src", img_src_value);
			main.attr_dev(img, "width", img_width_value = /*snippet*/ ctx[0].thumbnails.medium.width);
			main.attr_dev(img, "height", img_height_value = /*snippet*/ ctx[0].thumbnails.medium.height);
			main.attr_dev(img, "class", "svelte-18andtt");
			main.add_location(img, file, 7, 6, 106);
			main.attr_dev(div, "class", "image-wrapper");
			main.add_location(div, file, 6, 4, 72);
			main.attr_dev(h1, "class", "svelte-18andtt");
			main.add_location(h1, file, 14, 4, 305);
			main.attr_dev(p, "class", "svelte-18andtt");
			main.add_location(p, file, 15, 4, 334);
		},
		m: function mount(target, anchor) {
			main.insert_hydration_dev(target, div, anchor);
			main.append_hydration_dev(div, img);
			main.insert_hydration_dev(target, t0, anchor);
			main.insert_hydration_dev(target, h1, anchor);
			main.append_hydration_dev(h1, t1);
			main.insert_hydration_dev(target, t2, anchor);
			main.insert_hydration_dev(target, p, anchor);
			main.append_hydration_dev(p, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*snippet*/ 1 && img_alt_value !== (img_alt_value = /*snippet*/ ctx[0].title)) {
				main.attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*snippet*/ 1 && !main.src_url_equal(img.src, img_src_value = /*snippet*/ ctx[0].thumbnails.medium.url)) {
				main.attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*snippet*/ 1 && img_width_value !== (img_width_value = /*snippet*/ ctx[0].thumbnails.medium.width)) {
				main.attr_dev(img, "width", img_width_value);
			}

			if (dirty & /*snippet*/ 1 && img_height_value !== (img_height_value = /*snippet*/ ctx[0].thumbnails.medium.height)) {
				main.attr_dev(img, "height", img_height_value);
			}

			if (dirty & /*snippet*/ 1 && t1_value !== (t1_value = /*snippet*/ ctx[0].title + "")) main.set_data_dev(t1, t1_value);
			if (dirty & /*snippet*/ 1 && t3_value !== (t3_value = /*snippet*/ ctx[0].description + "")) main.set_data_dev(t3, t3_value);
		},
		d: function destroy(detaching) {
			if (detaching) main.detach_dev(div);
			if (detaching) main.detach_dev(t0);
			if (detaching) main.detach_dev(h1);
			if (detaching) main.detach_dev(t2);
			if (detaching) main.detach_dev(p);
		}
	};

	main.dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(6:2) {#if snippet}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let if_block = /*snippet*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			section = main.element("section");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = main.claim_element(nodes, "SECTION", { class: true });
			var section_nodes = main.children(section);
			if (if_block) if_block.l(section_nodes);
			section_nodes.forEach(main.detach_dev);
			this.h();
		},
		h: function hydrate() {
			main.attr_dev(section, "class", "svelte-18andtt");
			main.add_location(section, file, 4, 0, 42);
		},
		m: function mount(target, anchor) {
			main.insert_hydration_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*snippet*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(section, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: main.noop,
		o: main.noop,
		d: function destroy(detaching) {
			if (detaching) main.detach_dev(section);
			if (if_block) if_block.d();
		}
	};

	main.dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	main.validate_slots('VideoSnippet', slots, []);
	let { snippet } = $$props;
	const writable_props = ['snippet'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VideoSnippet> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('snippet' in $$props) $$invalidate(0, snippet = $$props.snippet);
	};

	$$self.$capture_state = () => ({ snippet });

	$$self.$inject_state = $$props => {
		if ('snippet' in $$props) $$invalidate(0, snippet = $$props.snippet);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [snippet];
}

class VideoSnippet extends main.SvelteComponentDev {
	constructor(options) {
		super(options);
		main.init(this, options, instance, create_fragment, main.safe_not_equal, { snippet: 0 });

		main.dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "VideoSnippet",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*snippet*/ ctx[0] === undefined && !('snippet' in props)) {
			console.warn("<VideoSnippet> was created without expected prop 'snippet'");
		}
	}

	get snippet() {
		throw new Error("<VideoSnippet>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set snippet(value) {
		throw new Error("<VideoSnippet>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

exports.VideoSnippet = VideoSnippet;
//# sourceMappingURL=VideoSnippet-8d173722.js.map
