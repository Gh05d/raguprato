
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, A as validate_each_argument, v as validate_slots, G as onDestroy, u as globals, e as element, a as space, c as claim_element, b as children, g as detach_dev, h as claim_space, k as attr_dev, E as null_to_empty, j as add_location, l as insert_hydration_dev, m as append_hydration_dev, x as listen_dev, t as text, H as query_selector_all, f as claim_text, y as prevent_default, w as set_data_dev, n as noop, C as destroy_each, o as validate_store, I as spotifyToken, p as component_subscribe, q as onMount, J as create_component, K as claim_component, L as mount_component, M as prop_dev, N as transition_in, O as transition_out, P as destroy_component, z as run_all, Q as to_number, D as set_input_value, R as location, T as push, U as src_url_equal, V as group_outros, W as check_outros, X as bubble } from './main-7ace8c10.js';
import { a as authenticateSpotify, u as updateLesson, b as axios, L as LESSONS, c as apiCall, A as ARROW_SRC, d as debounce } from './helpers-1ffa8285.js';
import { V as VideoSnippet } from './VideoSnippet-6195bdb6.js';

/* src/pages/Lesson/Stopwatch.svelte generated by Svelte v3.47.0 */

const { document: document_1$1 } = globals;
const file$2 = "src/pages/Lesson/Stopwatch.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i].title;
	child_ctx[18] = list[i].click;
	child_ctx[19] = list[i].icon;
	return child_ctx;
}

// (99:6) {#each buttons as { title, click, icon }}
function create_each_block$1(ctx) {
	let button;
	let i;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			i = element("i");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { type: true, title: true, class: true });
			var button_nodes = children(button);
			i = claim_element(button_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t = claim_space(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "" + (null_to_empty(`fa fa-${/*icon*/ ctx[19]}-circle`) + " svelte-5940q5"));
			add_location(i, file$2, 100, 10, 2005);
			attr_dev(button, "type", "button");
			attr_dev(button, "title", /*title*/ ctx[3]);
			attr_dev(button, "class", "svelte-5940q5");
			add_location(button, file$2, 99, 8, 1947);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, i);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click*/ ctx[18], false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(99:6) {#each buttons as { title, click, icon }}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let title_value;
	let t0;
	let section;
	let form;
	let div0;
	let t1;
	let div1;
	let t2;
	let t3;
	let span0;
	let t4;
	let t5;
	let div2;
	let t6;
	let t7;
	let span1;
	let t8;
	let t9;
	let div3;
	let t10;
	let mounted;
	let dispose;
	document_1$1.title = title_value = /*title*/ ctx[3];
	let each_value = /*buttons*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			form = element("form");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div1 = element("div");
			t2 = text(/*normalizedHours*/ ctx[2]);
			t3 = space();
			span0 = element("span");
			t4 = text(":");
			t5 = space();
			div2 = element("div");
			t6 = text(/*normalizedMinutes*/ ctx[1]);
			t7 = space();
			span1 = element("span");
			t8 = text(":");
			t9 = space();
			div3 = element("div");
			t10 = text(/*normalizedSeconds*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-1258swp\"]', document_1$1.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			form = claim_element(section_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			div0 = claim_element(form_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t1 = claim_space(form_nodes);
			div1 = claim_element(form_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t2 = claim_text(div1_nodes, /*normalizedHours*/ ctx[2]);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(form_nodes);
			span0 = claim_element(form_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t4 = claim_text(span0_nodes, ":");
			span0_nodes.forEach(detach_dev);
			t5 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t6 = claim_text(div2_nodes, /*normalizedMinutes*/ ctx[1]);
			div2_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);
			span1 = claim_element(form_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t8 = claim_text(span1_nodes, ":");
			span1_nodes.forEach(detach_dev);
			t9 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t10 = claim_text(div3_nodes, /*normalizedSeconds*/ ctx[0]);
			div3_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "controls svelte-5940q5");
			add_location(div0, file$2, 97, 4, 1868);
			attr_dev(div1, "class", "time svelte-5940q5");
			add_location(div1, file$2, 104, 4, 2089);
			attr_dev(span0, "class", "svelte-5940q5");
			add_location(span0, file$2, 105, 4, 2135);
			attr_dev(div2, "class", "time svelte-5940q5");
			add_location(div2, file$2, 106, 4, 2154);
			attr_dev(span1, "class", "svelte-5940q5");
			add_location(span1, file$2, 107, 4, 2202);
			attr_dev(div3, "class", "time svelte-5940q5");
			add_location(div3, file$2, 108, 4, 2221);
			attr_dev(form, "class", "svelte-5940q5");
			add_location(form, file$2, 96, 2, 1826);
			add_location(section, file$2, 95, 0, 1814);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, form);
			append_hydration_dev(form, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_hydration_dev(form, t1);
			append_hydration_dev(form, div1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(form, t3);
			append_hydration_dev(form, span0);
			append_hydration_dev(span0, t4);
			append_hydration_dev(form, t5);
			append_hydration_dev(form, div2);
			append_hydration_dev(div2, t6);
			append_hydration_dev(form, t7);
			append_hydration_dev(form, span1);
			append_hydration_dev(span1, t8);
			append_hydration_dev(form, t9);
			append_hydration_dev(form, div3);
			append_hydration_dev(div3, t10);

			if (!mounted) {
				dispose = listen_dev(form, "submit", prevent_default(/*run*/ ctx[4]), false, true, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 8 && title_value !== (title_value = /*title*/ ctx[3])) {
				document_1$1.title = title_value;
			}

			if (dirty & /*buttons*/ 32) {
				each_value = /*buttons*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*normalizedHours*/ 4) set_data_dev(t2, /*normalizedHours*/ ctx[2]);
			if (dirty & /*normalizedMinutes*/ 2) set_data_dev(t6, /*normalizedMinutes*/ ctx[1]);
			if (dirty & /*normalizedSeconds*/ 1) set_data_dev(t10, /*normalizedSeconds*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let normalizedHours;
	let normalizedMinutes;
	let normalizedSeconds;
	let title;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Stopwatch', slots, []);
	let { updateTime = null } = $$props;
	let total = 0;
	let minutes = 0;
	let seconds = 0;
	let hours = 0;
	let running = false;
	let time;
	let updated = false;
	const audio = new Audio("Herbert-03.wav");

	function run() {
		if (running) {
			return;
		}

		running = true;
		updated = false;
		timer();
	}

	function timer() {
		time = setInterval(
			() => {
				total++;

				if (seconds == 59) {
					$$invalidate(8, seconds = 0);

					if (minutes == 9) {
						audio.play();
						$$invalidate(7, minutes++, minutes);
					} else if (minutes == 59) {
						$$invalidate(7, minutes = 0);

						if (hours == 23) {
							$$invalidate(9, hours = 0);
						}

						$$invalidate(9, hours++, hours);
					} else {
						$$invalidate(7, minutes++, minutes);
					}
				} else {
					$$invalidate(8, seconds++, seconds);
				}
			},
			1000
		);
	}

	function pause() {
		clearInterval(time);
		time = null;

		if (updateTime && !updated) {
			updateTime(total);
			total = 0;
			updated = true;
		}

		running = false;
	}

	function reset() {
		pause();
		$$invalidate(9, hours = 0);
		$$invalidate(7, minutes = 0);
		$$invalidate(8, seconds = 0);
	}

	onDestroy(() => {
		clearInterval(time);

		if (updateTime && !updated) {
			updateTime(total);
		}

		// Setting the title via the variable does not work
		document.title = "Raguprato";
	});

	const buttons = [
		{ title: "Play", click: run, icon: "play" },
		{
			title: "Pause",
			click: pause,
			icon: "pause"
		},
		{
			title: "Reset",
			click: reset,
			icon: "stop"
		}
	];

	const writable_props = ['updateTime'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Stopwatch> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('updateTime' in $$props) $$invalidate(6, updateTime = $$props.updateTime);
	};

	$$self.$capture_state = () => ({
		onDestroy,
		updateTime,
		total,
		minutes,
		seconds,
		hours,
		running,
		time,
		updated,
		audio,
		run,
		timer,
		pause,
		reset,
		buttons,
		normalizedSeconds,
		normalizedMinutes,
		normalizedHours,
		title
	});

	$$self.$inject_state = $$props => {
		if ('updateTime' in $$props) $$invalidate(6, updateTime = $$props.updateTime);
		if ('total' in $$props) total = $$props.total;
		if ('minutes' in $$props) $$invalidate(7, minutes = $$props.minutes);
		if ('seconds' in $$props) $$invalidate(8, seconds = $$props.seconds);
		if ('hours' in $$props) $$invalidate(9, hours = $$props.hours);
		if ('running' in $$props) running = $$props.running;
		if ('time' in $$props) time = $$props.time;
		if ('updated' in $$props) updated = $$props.updated;
		if ('normalizedSeconds' in $$props) $$invalidate(0, normalizedSeconds = $$props.normalizedSeconds);
		if ('normalizedMinutes' in $$props) $$invalidate(1, normalizedMinutes = $$props.normalizedMinutes);
		if ('normalizedHours' in $$props) $$invalidate(2, normalizedHours = $$props.normalizedHours);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*hours*/ 512) {
			$$invalidate(2, normalizedHours = hours > 9 ? hours : `0${hours}`);
		}

		if ($$self.$$.dirty & /*minutes*/ 128) {
			$$invalidate(1, normalizedMinutes = minutes > 9 ? minutes : `0${minutes}`);
		}

		if ($$self.$$.dirty & /*seconds*/ 256) {
			$$invalidate(0, normalizedSeconds = seconds > 9 ? seconds : `0${seconds}`);
		}

		if ($$self.$$.dirty & /*normalizedHours, normalizedMinutes, normalizedSeconds*/ 7) {
			$$invalidate(3, title = `${normalizedHours}:${normalizedMinutes}:${normalizedSeconds}`);
		}
	};

	return [
		normalizedSeconds,
		normalizedMinutes,
		normalizedHours,
		title,
		run,
		buttons,
		updateTime,
		minutes,
		seconds,
		hours
	];
}

class Stopwatch extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { updateTime: 6 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Stopwatch",
			options,
			id: create_fragment$2.name
		});
	}

	get updateTime() {
		throw new Error("<Stopwatch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set updateTime(value) {
		throw new Error("<Stopwatch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/Lesson/LessonHeader.svelte generated by Svelte v3.47.0 */

const { console: console_1$1 } = globals;
const file$1 = "src/pages/Lesson/LessonHeader.svelte";

// (141:4) {:else}
function create_else_block_5(ctx) {
	let button;
	let t_value = /*lesson*/ ctx[0].title + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 141, 6, 3169);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[14], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t_value !== (t_value = /*lesson*/ ctx[0].title + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_5.name,
		type: "else",
		source: "(141:4) {:else}",
		ctx
	});

	return block;
}

// (137:4) {#if edit == 1}
function create_if_block_5$1(ctx) {
	let form;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { name: true });
			var form_nodes = children(form);
			input = claim_element(form_nodes, "INPUT", {});
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(input, file$1, 138, 8, 3108);
			attr_dev(form, "name", "title");
			add_location(form, file$1, 137, 6, 3046);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, form, anchor);
			append_hydration_dev(form, input);
			set_input_value(input, /*title*/ ctx[3]);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[13]),
					listen_dev(form, "submit", prevent_default(/*update*/ ctx[10]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 8 && input.value !== /*title*/ ctx[3]) {
				set_input_value(input, /*title*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(137:4) {#if edit == 1}",
		ctx
	});

	return block;
}

// (149:4) {:else}
function create_else_block_4(ctx) {
	let button;
	let t_value = /*lesson*/ ctx[0].artist + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 149, 6, 3430);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[16], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t_value !== (t_value = /*lesson*/ ctx[0].artist + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(149:4) {:else}",
		ctx
	});

	return block;
}

// (145:4) {#if edit == 2}
function create_if_block_4$1(ctx) {
	let form;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { name: true });
			var form_nodes = children(form);
			input = claim_element(form_nodes, "INPUT", {});
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(input, file$1, 146, 8, 3368);
			attr_dev(form, "name", "artist");
			add_location(form, file$1, 145, 6, 3305);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, form, anchor);
			append_hydration_dev(form, input);
			set_input_value(input, /*artist*/ ctx[4]);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler_1*/ ctx[15]),
					listen_dev(form, "submit", prevent_default(/*update*/ ctx[10]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*artist*/ 16 && input.value !== /*artist*/ ctx[4]) {
				set_input_value(input, /*artist*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(145:4) {#if edit == 2}",
		ctx
	});

	return block;
}

// (160:4) {:else}
function create_else_block_3(ctx) {
	let button;
	let label;
	let t0;
	let t1_value = (/*lesson*/ ctx[0].capo || "No") + "";
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			label = element("label");
			t0 = text("Capo:");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			label = claim_element(button_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Capo:");
			label_nodes.forEach(detach_dev);
			t1 = claim_text(button_nodes, t1_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "capo");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 161, 9, 3869);
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 160, 6, 3803);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, label);
			append_hydration_dev(label, t0);
			append_hydration_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_2*/ ctx[18], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t1_value !== (t1_value = (/*lesson*/ ctx[0].capo || "No") + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(160:4) {:else}",
		ctx
	});

	return block;
}

// (157:4) {#if edit == 3}
function create_if_block_3$1(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			t0 = text("Capo:");
			t1 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Capo:");
			label_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			input = claim_element(nodes, "INPUT", {
				id: true,
				type: true,
				placeholder: true,
				min: true,
				max: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "capo");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 157, 6, 3662);
			attr_dev(input, "id", "capo");
			attr_dev(input, "type", "number");
			attr_dev(input, "placeholder", "X");
			attr_dev(input, "min", "0");
			attr_dev(input, "max", "12");
			attr_dev(input, "class", "svelte-1wjd2ri");
			add_location(input, file$1, 158, 6, 3700);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, input, anchor);
			set_input_value(input, /*capo*/ ctx[1]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_2*/ ctx[17]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*capo*/ 2 && to_number(input.value) !== /*capo*/ ctx[1]) {
				set_input_value(input, /*capo*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(157:4) {#if edit == 3}",
		ctx
	});

	return block;
}

// (170:4) {:else}
function create_else_block_2(ctx) {
	let button;
	let label;
	let t0;
	let t1_value = (/*lesson*/ ctx[0].tuning || "Standard") + "";
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			label = element("label");
			t0 = text("Tuning:");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			label = claim_element(button_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Tuning:");
			label_nodes.forEach(detach_dev);
			t1 = claim_text(button_nodes, t1_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "tuning");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 171, 8, 4265);
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 170, 6, 4199);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, label);
			append_hydration_dev(label, t0);
			append_hydration_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_3*/ ctx[20], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t1_value !== (t1_value = (/*lesson*/ ctx[0].tuning || "Standard") + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(170:4) {:else}",
		ctx
	});

	return block;
}

// (167:4) {#if edit == 4}
function create_if_block_2$1(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			t0 = text("Tuning:");
			t1 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Tuning:");
			label_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			input = claim_element(nodes, "INPUT", { id: true, class: true, placeholder: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "tuning");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 167, 6, 4055);
			attr_dev(input, "id", "tuning");
			attr_dev(input, "class", "text-input svelte-1wjd2ri");
			attr_dev(input, "placeholder", "Standard");
			add_location(input, file$1, 168, 6, 4097);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, input, anchor);
			set_input_value(input, /*tuning*/ ctx[2]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_3*/ ctx[19]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tuning*/ 4 && input.value !== /*tuning*/ ctx[2]) {
				set_input_value(input, /*tuning*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(167:4) {#if edit == 4}",
		ctx
	});

	return block;
}

// (180:4) {:else}
function create_else_block_1$1(ctx) {
	let button;
	let label;
	let t0;
	let t1_value = /*translateKey*/ ctx[11](/*lesson*/ ctx[0].audioFeatures?.key) + "";
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			label = element("label");
			t0 = text("Key:");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			label = claim_element(button_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Key:");
			label_nodes.forEach(detach_dev);
			t1 = claim_text(button_nodes, t1_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "tuning");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 181, 8, 4653);
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 180, 6, 4587);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, label);
			append_hydration_dev(label, t0);
			append_hydration_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_4*/ ctx[22], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t1_value !== (t1_value = /*translateKey*/ ctx[11](/*lesson*/ ctx[0].audioFeatures?.key) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(180:4) {:else}",
		ctx
	});

	return block;
}

// (177:4) {#if edit == 5}
function create_if_block_1$1(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			t0 = text("Key:");
			t1 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Key:");
			label_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			input = claim_element(nodes, "INPUT", { id: true, class: true, placeholder: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "key");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 177, 6, 4460);
			attr_dev(input, "id", "key");
			attr_dev(input, "class", "text-input svelte-1wjd2ri");
			attr_dev(input, "placeholder", "Key");
			add_location(input, file$1, 178, 6, 4496);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, input, anchor);
			set_input_value(input, /*key*/ ctx[5]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_4*/ ctx[21]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*key*/ 32 && input.value !== /*key*/ ctx[5]) {
				set_input_value(input, /*key*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(177:4) {#if edit == 5}",
		ctx
	});

	return block;
}

// (195:4) {:else}
function create_else_block$1(ctx) {
	let button;
	let label;
	let t0;
	let t1_value = (/*lesson*/ ctx[0].audioFeatures?.tempo?.toFixed(0) || "Not set") + "";
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			label = element("label");
			t0 = text("Bpm:");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			label = claim_element(button_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Bpm:");
			label_nodes.forEach(detach_dev);
			t1 = claim_text(button_nodes, t1_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "tuning");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 196, 8, 5112);
			attr_dev(button, "class", "naked-button svelte-1wjd2ri");
			add_location(button, file$1, 195, 6, 5046);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, label);
			append_hydration_dev(label, t0);
			append_hydration_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_5*/ ctx[24], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*lesson*/ 1 && t1_value !== (t1_value = (/*lesson*/ ctx[0].audioFeatures?.tempo?.toFixed(0) || "Not set") + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(195:4) {:else}",
		ctx
	});

	return block;
}

// (187:4) {#if edit == 6}
function create_if_block$1(ctx) {
	let label;
	let t0;
	let t1;
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			label = element("label");
			t0 = text("Bpm:");
			t1 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, "Bpm:");
			label_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			input = claim_element(nodes, "INPUT", {
				id: true,
				type: true,
				class: true,
				placeholder: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", "bpm");
			attr_dev(label, "class", "svelte-1wjd2ri");
			add_location(label, file$1, 187, 6, 4857);
			attr_dev(input, "id", "bpm");
			attr_dev(input, "type", "number");
			attr_dev(input, "class", "text-input svelte-1wjd2ri");
			attr_dev(input, "placeholder", "Enter tempo");
			add_location(input, file$1, 188, 6, 4893);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, input, anchor);
			set_input_value(input, /*bpm*/ ctx[6]);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler_5*/ ctx[23]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bpm*/ 64 && to_number(input.value) !== /*bpm*/ ctx[6]) {
				set_input_value(input, /*bpm*/ ctx[6]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(187:4) {#if edit == 6}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let header;
	let h1;
	let t0;
	let span;
	let t1;
	let t2;
	let t3;
	let stopwatch;
	let t4;
	let form0;
	let t5;
	let form1;
	let t6;
	let form2;
	let t7;
	let form3;
	let t8;
	let button;
	let i;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*edit*/ ctx[7] == 1) return create_if_block_5$1;
		return create_else_block_5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*edit*/ ctx[7] == 2) return create_if_block_4$1;
		return create_else_block_4;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);

	stopwatch = new Stopwatch({
			props: { updateTime: /*updateTime*/ ctx[9] },
			$$inline: true
		});

	function select_block_type_2(ctx, dirty) {
		if (/*edit*/ ctx[7] == 3) return create_if_block_3$1;
		return create_else_block_3;
	}

	let current_block_type_2 = select_block_type_2(ctx);
	let if_block2 = current_block_type_2(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*edit*/ ctx[7] == 4) return create_if_block_2$1;
		return create_else_block_2;
	}

	let current_block_type_3 = select_block_type_3(ctx);
	let if_block3 = current_block_type_3(ctx);

	function select_block_type_4(ctx, dirty) {
		if (/*edit*/ ctx[7] == 5) return create_if_block_1$1;
		return create_else_block_1$1;
	}

	let current_block_type_4 = select_block_type_4(ctx);
	let if_block4 = current_block_type_4(ctx);

	function select_block_type_5(ctx, dirty) {
		if (/*edit*/ ctx[7] == 6) return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type_5 = select_block_type_5(ctx);
	let if_block5 = current_block_type_5(ctx);

	const block = {
		c: function create() {
			header = element("header");
			h1 = element("h1");
			if_block0.c();
			t0 = space();
			span = element("span");
			t1 = text("-");
			t2 = space();
			if_block1.c();
			t3 = space();
			create_component(stopwatch.$$.fragment);
			t4 = space();
			form0 = element("form");
			if_block2.c();
			t5 = space();
			form1 = element("form");
			if_block3.c();
			t6 = space();
			form2 = element("form");
			if_block4.c();
			t7 = space();
			form3 = element("form");
			if_block5.c();
			t8 = space();
			button = element("button");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			if_block0.l(h1_nodes);
			t0 = claim_space(h1_nodes);
			span = claim_element(h1_nodes, "SPAN", {});
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "-");
			span_nodes.forEach(detach_dev);
			t2 = claim_space(h1_nodes);
			if_block1.l(h1_nodes);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(header_nodes);
			claim_component(stopwatch.$$.fragment, header_nodes);
			t4 = claim_space(header_nodes);
			form0 = claim_element(header_nodes, "FORM", { name: true, class: true });
			var form0_nodes = children(form0);
			if_block2.l(form0_nodes);
			form0_nodes.forEach(detach_dev);
			t5 = claim_space(header_nodes);
			form1 = claim_element(header_nodes, "FORM", { name: true, class: true });
			var form1_nodes = children(form1);
			if_block3.l(form1_nodes);
			form1_nodes.forEach(detach_dev);
			t6 = claim_space(header_nodes);
			form2 = claim_element(header_nodes, "FORM", { name: true, class: true });
			var form2_nodes = children(form2);
			if_block4.l(form2_nodes);
			form2_nodes.forEach(detach_dev);
			t7 = claim_space(header_nodes);
			form3 = claim_element(header_nodes, "FORM", { name: true, class: true });
			var form3_nodes = children(form3);
			if_block5.l(form3_nodes);
			form3_nodes.forEach(detach_dev);
			t8 = claim_space(header_nodes);
			button = claim_element(header_nodes, "BUTTON", { class: true, title: true });
			var button_nodes = children(button);
			i = claim_element(button_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file$1, 143, 4, 3264);
			attr_dev(h1, "class", "svelte-1wjd2ri");
			add_location(h1, file$1, 135, 2, 3015);
			attr_dev(form0, "name", "capo");
			attr_dev(form0, "class", "header-form svelte-1wjd2ri");
			add_location(form0, file$1, 155, 2, 3563);
			attr_dev(form1, "name", "tuning");
			attr_dev(form1, "class", "header-form svelte-1wjd2ri");
			add_location(form1, file$1, 165, 2, 3954);
			attr_dev(form2, "name", "key");
			attr_dev(form2, "class", "header-form svelte-1wjd2ri");
			add_location(form2, file$1, 175, 2, 4362);
			attr_dev(form3, "name", "bpm");
			attr_dev(form3, "class", "header-form svelte-1wjd2ri");
			add_location(form3, file$1, 185, 2, 4759);
			attr_dev(i, "class", "fab fa-spotify");
			add_location(i, file$1, 202, 4, 5330);
			attr_dev(button, "class", "sync-button svelte-1wjd2ri");
			attr_dev(button, "title", "Sync Spotify");
			button.disabled = /*loading*/ ctx[8];
			add_location(button, file$1, 201, 2, 5241);
			attr_dev(header, "class", "svelte-1wjd2ri");
			add_location(header, file$1, 134, 0, 3004);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, header, anchor);
			append_hydration_dev(header, h1);
			if_block0.m(h1, null);
			append_hydration_dev(h1, t0);
			append_hydration_dev(h1, span);
			append_hydration_dev(span, t1);
			append_hydration_dev(h1, t2);
			if_block1.m(h1, null);
			append_hydration_dev(header, t3);
			mount_component(stopwatch, header, null);
			append_hydration_dev(header, t4);
			append_hydration_dev(header, form0);
			if_block2.m(form0, null);
			append_hydration_dev(header, t5);
			append_hydration_dev(header, form1);
			if_block3.m(form1, null);
			append_hydration_dev(header, t6);
			append_hydration_dev(header, form2);
			if_block4.m(form2, null);
			append_hydration_dev(header, t7);
			append_hydration_dev(header, form3);
			if_block5.m(form3, null);
			append_hydration_dev(header, t8);
			append_hydration_dev(header, button);
			append_hydration_dev(button, i);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(form0, "submit", prevent_default(/*update*/ ctx[10]), false, true, false),
					listen_dev(form1, "submit", prevent_default(/*update*/ ctx[10]), false, true, false),
					listen_dev(form2, "submit", prevent_default(/*update*/ ctx[10]), false, true, false),
					listen_dev(form3, "submit", prevent_default(/*update*/ ctx[10]), false, true, false),
					listen_dev(button, "click", /*sync*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(h1, t0);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(h1, null);
				}
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_2(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(form0, null);
				}
			}

			if (current_block_type_3 === (current_block_type_3 = select_block_type_3(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_3(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(form1, null);
				}
			}

			if (current_block_type_4 === (current_block_type_4 = select_block_type_4(ctx)) && if_block4) {
				if_block4.p(ctx, dirty);
			} else {
				if_block4.d(1);
				if_block4 = current_block_type_4(ctx);

				if (if_block4) {
					if_block4.c();
					if_block4.m(form2, null);
				}
			}

			if (current_block_type_5 === (current_block_type_5 = select_block_type_5(ctx)) && if_block5) {
				if_block5.p(ctx, dirty);
			} else {
				if_block5.d(1);
				if_block5 = current_block_type_5(ctx);

				if (if_block5) {
					if_block5.c();
					if_block5.m(form3, null);
				}
			}

			if (!current || dirty & /*loading*/ 256) {
				prop_dev(button, "disabled", /*loading*/ ctx[8]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(stopwatch.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stopwatch.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if_block0.d();
			if_block1.d();
			destroy_component(stopwatch);
			if_block2.d();
			if_block3.d();
			if_block4.d();
			if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $spotifyToken;
	validate_store(spotifyToken, 'spotifyToken');
	component_subscribe($$self, spotifyToken, $$value => $$invalidate(25, $spotifyToken = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LessonHeader', slots, []);
	let { lesson } = $$props;
	let capo;
	let tuning;
	let title;
	let artist;
	let key;
	let bpm;
	let edit;
	let loading;

	const keys = [
		"C",
		"C#/Db",
		"D",
		"D#/Eb",
		"E",
		"F",
		"F#/Gb",
		"G",
		"G#/Ab",
		"A",
		"A#/Bb",
		"B",
		"C"
	];

	async function updateTime(seconds) {
		if (!lesson.totalTime) {
			$$invalidate(0, lesson.totalTime = 0, lesson);
		}

		$$invalidate(0, lesson.totalTime += seconds, lesson);
		await updateLesson(lesson);
	}

	async function update({ target: { name } }) {
		if (name == "key") {
			if (!lesson.audioFeatures) {
				$$invalidate(0, lesson.audioFeatures = {}, lesson);
			}

			const validKey = keys.findIndex(keyValue => keyValue == key.toUpperCase());
			$$invalidate(0, lesson.audioFeatures.key = validKey !== -1 ? validKey : null, lesson);
		} else if (name == "bpm") {
			if (!lesson.audioFeatures) {
				$$invalidate(0, lesson.audioFeatures = {}, lesson);
			}

			$$invalidate(0, lesson.audioFeatures.tempo = bpm, lesson);
		} else {
			$$invalidate(
				0,
				lesson[name] = name == "title"
				? title
				: name == "artist"
					? artist
					: name == "capo" ? capo : tuning,
				lesson
			);
		}

		await updateLesson(lesson);
		$$invalidate(7, edit = null);
	}

	function translateKey(key) {
		if (key === undefined || key === null) {
			return "Not set";
		}

		return keys[key];
	}

	async function sync() {
		try {
			$$invalidate(8, loading = true);

			if (!$spotifyToken) {
				const credentials = await authenticateSpotify();
				await spotifyToken.set(credentials?.data?.access_token);
			}

			const res = await axios("https://api.spotify.com/v1/search", {
				headers: {
					Authorization: `Authorization: Bearer ${$spotifyToken}`
				},
				params: {
					q: encodeURI(title),
					type: "track",
					limit: 1
				}
			});

			const [spotifyResponse] = res?.data?.tracks?.items;

			const { data } = await axios("https://api.spotify.com/v1/audio-features", {
				headers: {
					"Content-Type": "application/json",
					Authorization: `Authorization: Bearer ${$spotifyToken}`
				},
				params: { ids: spotifyResponse.id }
			});

			if (data?.audio_features[0]) {
				$$invalidate(5, key = data?.audio_features[0]?.key);
				$$invalidate(6, bpm = data?.audio_features[0]?.tempo);

				if (!lesson.audioFeatures) {
					$$invalidate(0, lesson.audioFeatures = {}, lesson);
				}

				$$invalidate(0, lesson.audioFeatures.key = key, lesson);
				$$invalidate(0, lesson.audioFeatures.tempo = bpm, lesson);
				await updateLesson(lesson);
			}
		} catch(error) {
			console.error(error);
		} finally {
			$$invalidate(8, loading = false);
		}
	}

	onMount(() => {
		$$invalidate(1, capo = lesson.capo);
		$$invalidate(2, tuning = lesson.tuning);
		$$invalidate(3, title = lesson.title);
		$$invalidate(4, artist = lesson.artist);
		$$invalidate(5, key = lesson.audioFeatures?.key);
		$$invalidate(6, bpm = lesson.audioFeatures?.tempo);
	});

	const writable_props = ['lesson'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<LessonHeader> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		title = this.value;
		$$invalidate(3, title);
	}

	const click_handler = () => $$invalidate(7, edit = 1);

	function input_input_handler_1() {
		artist = this.value;
		$$invalidate(4, artist);
	}

	const click_handler_1 = () => $$invalidate(7, edit = 2);

	function input_input_handler_2() {
		capo = to_number(this.value);
		$$invalidate(1, capo);
	}

	const click_handler_2 = () => $$invalidate(7, edit = 3);

	function input_input_handler_3() {
		tuning = this.value;
		$$invalidate(2, tuning);
	}

	const click_handler_3 = () => $$invalidate(7, edit = 4);

	function input_input_handler_4() {
		key = this.value;
		$$invalidate(5, key);
	}

	const click_handler_4 = () => $$invalidate(7, edit = 5);

	function input_input_handler_5() {
		bpm = to_number(this.value);
		$$invalidate(6, bpm);
	}

	const click_handler_5 = () => $$invalidate(7, edit = 6);

	$$self.$$set = $$props => {
		if ('lesson' in $$props) $$invalidate(0, lesson = $$props.lesson);
	};

	$$self.$capture_state = () => ({
		onMount,
		Stopwatch,
		authenticateSpotify,
		updateLesson,
		spotifyToken,
		axios,
		lesson,
		capo,
		tuning,
		title,
		artist,
		key,
		bpm,
		edit,
		loading,
		keys,
		updateTime,
		update,
		translateKey,
		sync,
		$spotifyToken
	});

	$$self.$inject_state = $$props => {
		if ('lesson' in $$props) $$invalidate(0, lesson = $$props.lesson);
		if ('capo' in $$props) $$invalidate(1, capo = $$props.capo);
		if ('tuning' in $$props) $$invalidate(2, tuning = $$props.tuning);
		if ('title' in $$props) $$invalidate(3, title = $$props.title);
		if ('artist' in $$props) $$invalidate(4, artist = $$props.artist);
		if ('key' in $$props) $$invalidate(5, key = $$props.key);
		if ('bpm' in $$props) $$invalidate(6, bpm = $$props.bpm);
		if ('edit' in $$props) $$invalidate(7, edit = $$props.edit);
		if ('loading' in $$props) $$invalidate(8, loading = $$props.loading);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		lesson,
		capo,
		tuning,
		title,
		artist,
		key,
		bpm,
		edit,
		loading,
		updateTime,
		update,
		translateKey,
		sync,
		input_input_handler,
		click_handler,
		input_input_handler_1,
		click_handler_1,
		input_input_handler_2,
		click_handler_2,
		input_input_handler_3,
		click_handler_3,
		input_input_handler_4,
		click_handler_4,
		input_input_handler_5,
		click_handler_5
	];
}

class LessonHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { lesson: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LessonHeader",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*lesson*/ ctx[0] === undefined && !('lesson' in props)) {
			console_1$1.warn("<LessonHeader> was created without expected prop 'lesson'");
		}
	}

	get lesson() {
		throw new Error("<LessonHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set lesson(value) {
		throw new Error("<LessonHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/pages/Lesson/index.svelte generated by Svelte v3.47.0 */

const { console: console_1, document: document_1 } = globals;
const file = "src/pages/Lesson/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	child_ctx[36] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	child_ctx[36] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[41] = list[i];
	return child_ctx;
}

// (343:2) {:else}
function create_else_block_1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text("Sorry, could not load lesson");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, "Sorry, could not load lesson");
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 343, 4, 8944);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, t);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(343:2) {:else}",
		ctx
	});

	return block;
}

// (218:2) {#if lesson}
function create_if_block(ctx) {
	let lessonheader;
	let t0;
	let t1;
	let div0;
	let form0;
	let input0;
	let t2;
	let form1;
	let input1;
	let t3;
	let t4;
	let t5;
	let h20;
	let t6;
	let t7;
	let form2;
	let input2;
	let t8;
	let t9;
	let h21;
	let t10;
	let t11;
	let div1;
	let t12;
	let t13;
	let div2;
	let t14;
	let t15;
	let div3;
	let img0;
	let img0_src_value;
	let t16;
	let img1;
	let img1_src_value;
	let t17;
	let label;
	let t18;
	let t19;
	let textarea;
	let t20;
	let button;
	let button_class_value;
	let current;
	let mounted;
	let dispose;

	lessonheader = new LessonHeader({
			props: { lesson: /*lesson*/ ctx[2] },
			$$inline: true
		});

	let if_block0 = /*addVideos*/ ctx[1] && create_if_block_6(ctx);
	let if_block1 = /*lesson*/ ctx[2].videos?.length && create_if_block_5(ctx);
	let if_block2 = /*lesson*/ ctx[2].tab && create_if_block_4(ctx);
	let if_block3 = /*lesson*/ ctx[2].chords?.length > 0 && create_if_block_3(ctx);
	let each_value_1 = [...Array(6)];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block4 = /*lesson*/ ctx[2]?.strumming && create_if_block_2(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*lesson*/ ctx[2].finished) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block5 = current_block_type(ctx);

	const block = {
		c: function create() {
			create_component(lessonheader.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div0 = element("div");
			form0 = element("form");
			input0 = element("input");
			t2 = space();
			form1 = element("form");
			input1 = element("input");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			h20 = element("h2");
			t6 = text("Chords");
			t7 = space();
			form2 = element("form");
			input2 = element("input");
			t8 = space();
			if (if_block3) if_block3.c();
			t9 = space();
			h21 = element("h2");
			t10 = text("Strumming Pattern");
			t11 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t12 = space();
			if (if_block4) if_block4.c();
			t13 = space();
			div2 = element("div");
			t14 = text("Drag and Drop the Arrows to create a Strumming Pattern");
			t15 = space();
			div3 = element("div");
			img0 = element("img");
			t16 = space();
			img1 = element("img");
			t17 = space();
			label = element("label");
			t18 = text("Notes about the Song");
			t19 = space();
			textarea = element("textarea");
			t20 = space();
			button = element("button");
			if_block5.c();
			this.h();
		},
		l: function claim(nodes) {
			claim_component(lessonheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			form0 = claim_element(div0_nodes, "FORM", { class: true });
			var form0_nodes = children(form0);
			input0 = claim_element(form0_nodes, "INPUT", { placeholder: true });
			form0_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			form1 = claim_element(div0_nodes, "FORM", { class: true });
			var form1_nodes = children(form1);
			input1 = claim_element(form1_nodes, "INPUT", { placeholder: true });
			form1_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			if (if_block1) if_block1.l(div0_nodes);
			t4 = claim_space(div0_nodes);
			if (if_block2) if_block2.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			h20 = claim_element(nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t6 = claim_text(h20_nodes, "Chords");
			h20_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			form2 = claim_element(nodes, "FORM", { class: true });
			var form2_nodes = children(form2);
			input2 = claim_element(form2_nodes, "INPUT", { placeholder: true });
			form2_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t9 = claim_space(nodes);
			h21 = claim_element(nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t10 = claim_text(h21_nodes, "Strumming Pattern");
			h21_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			t12 = claim_space(div1_nodes);
			if (if_block4) if_block4.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", {});
			var div2_nodes = children(div2);
			t14 = claim_text(div2_nodes, "Drag and Drop the Arrows to create a Strumming Pattern");
			div2_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", {});
			var div3_nodes = children(div3);
			img0 = claim_element(div3_nodes, "IMG", { alt: true, class: true, src: true });
			t16 = claim_space(div3_nodes);
			img1 = claim_element(div3_nodes, "IMG", { class: true, alt: true, src: true });
			div3_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			label = claim_element(nodes, "LABEL", { for: true });
			var label_nodes = children(label);
			t18 = claim_text(label_nodes, "Notes about the Song");
			label_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			textarea = claim_element(nodes, "TEXTAREA", { id: true, rows: true, placeholder: true });
			children(textarea).forEach(detach_dev);
			t20 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			if_block5.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "placeholder", "Search for another Video");
			add_location(input0, file, 232, 8, 5602);
			attr_dev(form0, "class", "svelte-15tqh3r");
			add_location(form0, file, 231, 6, 5544);
			attr_dev(input1, "placeholder", "Update Guitar Tab");
			add_location(input1, file, 239, 8, 5806);
			attr_dev(form1, "class", "svelte-15tqh3r");
			add_location(form1, file, 238, 6, 5754);
			attr_dev(div0, "class", "media-wrapper svelte-15tqh3r");
			add_location(div0, file, 230, 4, 5510);
			attr_dev(h20, "class", "svelte-15tqh3r");
			add_location(h20, file, 270, 4, 6767);
			attr_dev(input2, "placeholder", "Am");
			add_location(input2, file, 273, 6, 6837);
			attr_dev(form2, "class", "svelte-15tqh3r");
			add_location(form2, file, 272, 4, 6788);
			attr_dev(h21, "class", "svelte-15tqh3r");
			add_location(h21, file, 295, 4, 7536);
			attr_dev(div1, "class", "strumming svelte-15tqh3r");
			add_location(div1, file, 296, 4, 7567);
			add_location(div2, file, 317, 4, 8153);
			attr_dev(img0, "alt", "Arrow down");
			attr_dev(img0, "class", "arrow-down");
			if (!src_url_equal(img0.src, img0_src_value = ARROW_SRC)) attr_dev(img0, "src", img0_src_value);
			add_location(img0, file, 319, 6, 8235);
			attr_dev(img1, "class", "arrow-up svelte-15tqh3r");
			attr_dev(img1, "alt", "Arrow down");
			if (!src_url_equal(img1.src, img1_src_value = ARROW_SRC)) attr_dev(img1, "src", img1_src_value);
			add_location(img1, file, 324, 6, 8397);
			add_location(div3, file, 318, 4, 8223);
			attr_dev(label, "for", "notes");
			add_location(label, file, 331, 4, 8565);
			attr_dev(textarea, "id", "notes");
			attr_dev(textarea, "rows", 5);
			attr_dev(textarea, "placeholder", "Your notes for the song");
			add_location(textarea, file, 332, 4, 8617);
			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*lesson*/ ctx[2].finished ? "re-open" : "") + " svelte-15tqh3r"));
			add_location(button, file, 339, 4, 8784);
		},
		m: function mount(target, anchor) {
			mount_component(lessonheader, target, anchor);
			insert_hydration_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, div0, anchor);
			append_hydration_dev(div0, form0);
			append_hydration_dev(form0, input0);
			set_input_value(input0, /*videoSearch*/ ctx[0]);
			append_hydration_dev(div0, t2);
			append_hydration_dev(div0, form1);
			append_hydration_dev(form1, input1);
			set_input_value(input1, /*tab*/ ctx[6]);
			append_hydration_dev(div0, t3);
			if (if_block1) if_block1.m(div0, null);
			append_hydration_dev(div0, t4);
			if (if_block2) if_block2.m(div0, null);
			insert_hydration_dev(target, t5, anchor);
			insert_hydration_dev(target, h20, anchor);
			append_hydration_dev(h20, t6);
			insert_hydration_dev(target, t7, anchor);
			insert_hydration_dev(target, form2, anchor);
			append_hydration_dev(form2, input2);
			set_input_value(input2, /*selectedChord*/ ctx[4]);
			insert_hydration_dev(target, t8, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_hydration_dev(target, t9, anchor);
			insert_hydration_dev(target, h21, anchor);
			append_hydration_dev(h21, t10);
			insert_hydration_dev(target, t11, anchor);
			insert_hydration_dev(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append_hydration_dev(div1, t12);
			if (if_block4) if_block4.m(div1, null);
			insert_hydration_dev(target, t13, anchor);
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, t14);
			insert_hydration_dev(target, t15, anchor);
			insert_hydration_dev(target, div3, anchor);
			append_hydration_dev(div3, img0);
			append_hydration_dev(div3, t16);
			append_hydration_dev(div3, img1);
			insert_hydration_dev(target, t17, anchor);
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, t18);
			insert_hydration_dev(target, t19, anchor);
			insert_hydration_dev(target, textarea, anchor);
			set_input_value(textarea, /*notes*/ ctx[5]);
			insert_hydration_dev(target, t20, anchor);
			insert_hydration_dev(target, button, anchor);
			if_block5.m(button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*debouncedSearch*/ ctx[16], false, false, false),
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[20]),
					listen_dev(form0, "submit", prevent_default(/*debouncedSearch*/ ctx[16]), false, true, false),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[21]),
					listen_dev(form1, "submit", prevent_default(/*updateTab*/ ctx[13]), false, true, false),
					listen_dev(input2, "input", /*input2_input_handler*/ ctx[24]),
					listen_dev(form2, "submit", prevent_default(/*addChord*/ ctx[7]), false, true, false),
					listen_dev(div1, "dragover", prevent_default(/*dragover_handler_1*/ ctx[18]), false, true, false),
					listen_dev(div1, "drop", prevent_default(/*handleDrop*/ ctx[10]), false, true, false),
					listen_dev(img0, "dragstart", dragstart_handler_1, false, false, false),
					listen_dev(img1, "dragstart", dragstart_handler_2, false, false, false),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[27]),
					listen_dev(textarea, "change", /*change_handler*/ ctx[28], false, false, false),
					listen_dev(button, "click", /*finish*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const lessonheader_changes = {};
			if (dirty[0] & /*lesson*/ 4) lessonheader_changes.lesson = /*lesson*/ ctx[2];
			lessonheader.$set(lessonheader_changes);

			if (/*addVideos*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*addVideos*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*videoSearch*/ 1 && input0.value !== /*videoSearch*/ ctx[0]) {
				set_input_value(input0, /*videoSearch*/ ctx[0]);
			}

			if (dirty[0] & /*tab*/ 64 && input1.value !== /*tab*/ ctx[6]) {
				set_input_value(input1, /*tab*/ ctx[6]);
			}

			if (/*lesson*/ ctx[2].videos?.length) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(div0, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*lesson*/ ctx[2].tab) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*selectedChord*/ 16 && input2.value !== /*selectedChord*/ ctx[4]) {
				set_input_value(input2, /*selectedChord*/ ctx[4]);
			}

			if (/*lesson*/ ctx[2].chords?.length > 0) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_3(ctx);
					if_block3.c();
					if_block3.m(t9.parentNode, t9);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*lesson*/ ctx[2]?.strumming) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_2(ctx);
					if_block4.c();
					if_block4.m(div1, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty[0] & /*notes*/ 32) {
				set_input_value(textarea, /*notes*/ ctx[5]);
			}

			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
				if_block5.d(1);
				if_block5 = current_block_type(ctx);

				if (if_block5) {
					if_block5.c();
					if_block5.m(button, null);
				}
			}

			if (!current || dirty[0] & /*lesson*/ 4 && button_class_value !== (button_class_value = "" + (null_to_empty(/*lesson*/ ctx[2].finished ? "re-open" : "") + " svelte-15tqh3r"))) {
				attr_dev(button, "class", button_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(lessonheader.$$.fragment, local);
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(lessonheader.$$.fragment, local);
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(lessonheader, detaching);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div0);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(form2);
			if (detaching) detach_dev(t8);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(h21);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			if (if_block4) if_block4.d();
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(textarea);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(button);
			if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(218:2) {#if lesson}",
		ctx
	});

	return block;
}

// (221:4) {#if addVideos}
function create_if_block_6(ctx) {
	let ul;
	let current;
	let each_value_3 = /*addVideos*/ ctx[1];
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "video-container svelte-15tqh3r");
			add_location(ul, file, 221, 6, 5261);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*addVideo, addVideos*/ 16386) {
				each_value_3 = /*addVideos*/ ctx[1];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(221:4) {#if addVideos}",
		ctx
	});

	return block;
}

// (223:8) {#each addVideos as video}
function create_each_block_3(ctx) {
	let li;
	let videosnippet;
	let t;
	let current;
	let mounted;
	let dispose;

	videosnippet = new VideoSnippet({
			props: { snippet: /*video*/ ctx[41].snippet },
			$$inline: true
		});

	function click_handler() {
		return /*click_handler*/ ctx[19](/*video*/ ctx[41]);
	}

	const block = {
		c: function create() {
			li = element("li");
			create_component(videosnippet.$$.fragment);
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { role: true, class: true });
			var li_nodes = children(li);
			claim_component(videosnippet.$$.fragment, li_nodes);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "role", "button");
			attr_dev(li, "class", "svelte-15tqh3r");
			add_location(li, file, 223, 10, 5335);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			mount_component(videosnippet, li, null);
			append_hydration_dev(li, t);
			current = true;

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const videosnippet_changes = {};
			if (dirty[0] & /*addVideos*/ 2) videosnippet_changes.snippet = /*video*/ ctx[41].snippet;
			videosnippet.$set(videosnippet_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(videosnippet.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(videosnippet.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_component(videosnippet);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(223:8) {#each addVideos as video}",
		ctx
	});

	return block;
}

// (243:6) {#if lesson.videos?.length}
function create_if_block_5(ctx) {
	let div;
	let button0;
	let i0;
	let t0;
	let iframe;
	let iframe_title_value;
	let iframe_src_value;
	let t1;
	let button1;
	let i1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			button0 = element("button");
			i0 = element("i");
			t0 = space();
			iframe = element("iframe");
			t1 = space();
			button1 = element("button");
			i1 = element("i");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button0 = claim_element(div_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			i0 = claim_element(button0_nodes, "I", { class: true });
			children(i0).forEach(detach_dev);
			button0_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);
			iframe = claim_element(div_nodes, "IFRAME", { title: true, class: true, src: true });
			children(iframe).forEach(detach_dev);
			t1 = claim_space(div_nodes);
			button1 = claim_element(div_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			i1 = claim_element(button1_nodes, "I", { class: true });
			children(i1).forEach(detach_dev);
			button1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i0, "class", "fa fa-caret-left");
			add_location(i0, file, 245, 12, 6036);
			attr_dev(button0, "class", "naked-button svelte-15tqh3r");
			add_location(button0, file, 244, 10, 5961);
			attr_dev(iframe, "title", iframe_title_value = `Lesson video of ${/*lesson*/ ctx[2].title}`);
			iframe.allowFullscreen = true;
			attr_dev(iframe, "class", "video svelte-15tqh3r");
			if (!src_url_equal(iframe.src, iframe_src_value = `https://www.youtube.com/embed/${/*lesson*/ ctx[2].videos[/*showVideo*/ ctx[3]]}`)) attr_dev(iframe, "src", iframe_src_value);
			add_location(iframe, file, 247, 10, 6097);
			attr_dev(i1, "class", "fa fa-caret-right");
			add_location(i1, file, 253, 12, 6378);
			attr_dev(button1, "class", "naked-button svelte-15tqh3r");
			add_location(button1, file, 252, 10, 6304);
			attr_dev(div, "class", "iframe-wrapper svelte-15tqh3r");
			add_location(div, file, 243, 8, 5922);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, button0);
			append_hydration_dev(button0, i0);
			append_hydration_dev(div, t0);
			append_hydration_dev(div, iframe);
			append_hydration_dev(div, t1);
			append_hydration_dev(div, button1);
			append_hydration_dev(button1, i1);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler_1*/ ctx[22], false, false, false),
					listen_dev(button1, "click", /*click_handler_2*/ ctx[23], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lesson*/ 4 && iframe_title_value !== (iframe_title_value = `Lesson video of ${/*lesson*/ ctx[2].title}`)) {
				attr_dev(iframe, "title", iframe_title_value);
			}

			if (dirty[0] & /*lesson, showVideo*/ 12 && !src_url_equal(iframe.src, iframe_src_value = `https://www.youtube.com/embed/${/*lesson*/ ctx[2].videos[/*showVideo*/ ctx[3]]}`)) {
				attr_dev(iframe, "src", iframe_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(243:6) {#if lesson.videos?.length}",
		ctx
	});

	return block;
}

// (259:6) {#if lesson.tab}
function create_if_block_4(ctx) {
	let iframe;
	let iframe_src_value;

	const block = {
		c: function create() {
			iframe = element("iframe");
			this.h();
		},
		l: function claim(nodes) {
			iframe = claim_element(nodes, "IFRAME", {
				allow: true,
				referrerpolicy: true,
				loading: true,
				height: true,
				width: true,
				title: true,
				src: true
			});

			children(iframe).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(iframe, "allow", "fullscreen");
			attr_dev(iframe, "referrerpolicy", "no-referrer");
			attr_dev(iframe, "loading", "lazy");
			attr_dev(iframe, "height", "100%");
			attr_dev(iframe, "width", "100%");
			attr_dev(iframe, "title", "Hopefully some lyrics");
			if (!src_url_equal(iframe.src, iframe_src_value = /*lesson*/ ctx[2].tab || "https://www.guitaretab.com")) attr_dev(iframe, "src", iframe_src_value);
			add_location(iframe, file, 259, 8, 6489);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, iframe, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lesson*/ 4 && !src_url_equal(iframe.src, iframe_src_value = /*lesson*/ ctx[2].tab || "https://www.guitaretab.com")) {
				attr_dev(iframe, "src", iframe_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(iframe);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(259:6) {#if lesson.tab}",
		ctx
	});

	return block;
}

// (277:4) {#if lesson.chords?.length > 0}
function create_if_block_3(ctx) {
	let div;
	let each_value_2 = /*lesson*/ ctx[2].chords;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "chord-wrapper svelte-15tqh3r");
			add_location(div, file, 277, 6, 6946);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lesson, deleteChord*/ 260) {
				each_value_2 = /*lesson*/ ctx[2].chords;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(277:4) {#if lesson.chords?.length > 0}",
		ctx
	});

	return block;
}

// (279:8) {#each lesson.chords as chord, i}
function create_each_block_2(ctx) {
	let div1;
	let button;
	let i_1;
	let t0;
	let div0;
	let t1_value = /*chord*/ ctx[39] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[25](/*i*/ ctx[36]);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			button = element("button");
			i_1 = element("i");
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			button = claim_element(div1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			i_1 = claim_element(button_nodes, "I", { class: true });
			children(i_1).forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, t1_value);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i_1, "class", "fa fa-times");
			add_location(i_1, file, 281, 14, 7141);
			attr_dev(button, "class", "naked-button svelte-15tqh3r");
			add_location(button, file, 280, 12, 7065);
			attr_dev(div0, "id", `chord-${/*i*/ ctx[36]}`);
			attr_dev(div0, "class", "svelte-15tqh3r");
			add_location(div0, file, 283, 12, 7201);
			attr_dev(div1, "class", "chord-holder svelte-15tqh3r");
			add_location(div1, file, 279, 10, 7026);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, button);
			append_hydration_dev(button, i_1);
			append_hydration_dev(div1, t0);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t1);
			append_hydration_dev(div1, t2);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_3, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*lesson*/ 4 && t1_value !== (t1_value = /*chord*/ ctx[39] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(279:8) {#each lesson.chords as chord, i}",
		ctx
	});

	return block;
}

// (298:6) {#each [...Array(6)] as i}
function create_each_block_1(ctx) {
	let hr;

	const block = {
		c: function create() {
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			hr = claim_element(nodes, "HR", {});
			this.h();
		},
		h: function hydrate() {
			add_location(hr, file, 298, 8, 7695);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, hr, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(298:6) {#each [...Array(6)] as i}",
		ctx
	});

	return block;
}

// (302:6) {#if lesson?.strumming}
function create_if_block_2(ctx) {
	let ul;
	let each_value = /*lesson*/ ctx[2].strumming;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-15tqh3r");
			add_location(ul, file, 302, 8, 7755);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lesson*/ 4) {
				each_value = /*lesson*/ ctx[2].strumming;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(302:6) {#if lesson?.strumming}",
		ctx
	});

	return block;
}

// (304:10) {#each lesson.strumming as strum, i}
function create_each_block(ctx) {
	let li;
	let img;
	let img_class_value;
	let img_src_value;
	let t;
	let mounted;
	let dispose;

	function dragstart_handler(...args) {
		return /*dragstart_handler*/ ctx[26](/*i*/ ctx[36], ...args);
	}

	const block = {
		c: function create() {
			li = element("li");
			img = element("img");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);

			img = claim_element(li_nodes, "IMG", {
				alt: true,
				width: true,
				height: true,
				class: true,
				src: true
			});

			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", "Arrow");
			attr_dev(img, "width", 60);
			attr_dev(img, "height", 80);
			attr_dev(img, "class", img_class_value = "" + (null_to_empty(`arrow-${/*strum*/ ctx[34]}`) + " svelte-15tqh3r"));
			if (!src_url_equal(img.src, img_src_value = ARROW_SRC)) attr_dev(img, "src", img_src_value);
			add_location(img, file, 305, 14, 7838);
			add_location(li, file, 304, 12, 7819);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, img);
			append_hydration_dev(li, t);

			if (!mounted) {
				dispose = listen_dev(img, "dragstart", dragstart_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*lesson*/ 4 && img_class_value !== (img_class_value = "" + (null_to_empty(`arrow-${/*strum*/ ctx[34]}`) + " svelte-15tqh3r"))) {
				attr_dev(img, "class", img_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(304:10) {#each lesson.strumming as strum, i}",
		ctx
	});

	return block;
}

// (341:38) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Finish Lesson");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Finish Lesson");
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(341:38) {:else}",
		ctx
	});

	return block;
}

// (341:6) {#if lesson.finished}
function create_if_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Open Lesson");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Open Lesson");
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(341:6) {#if lesson.finished}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let link;
	let script0;
	let script0_src_value;
	let script1;
	let script1_src_value;
	let script2;
	let script2_src_value;
	let t;
	let section;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*lesson*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			link = element("link");
			script0 = element("script");
			script1 = element("script");
			script2 = element("script");
			t = space();
			section = element("section");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-13gsas1\"]', document_1.head);
			link = claim_element(head_nodes, "LINK", { type: true, rel: true, href: true });
			script0 = claim_element(head_nodes, "SCRIPT", { src: true, type: true });
			var script0_nodes = children(script0);
			script0_nodes.forEach(detach_dev);
			script1 = claim_element(head_nodes, "SCRIPT", { src: true, type: true });
			var script1_nodes = children(script1);
			script1_nodes.forEach(detach_dev);
			script2 = claim_element(head_nodes, "SCRIPT", { src: true, type: true });
			var script2_nodes = children(script2);
			script2_nodes.forEach(detach_dev);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if_block.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(link, "type", "text/css");
			attr_dev(link, "rel", "stylesheet");
			attr_dev(link, "href", "http://jtab.tardate.com/css/jtab-helper.css");
			add_location(link, file, 200, 2, 4640);
			if (!src_url_equal(script0.src, script0_src_value = "http://jtab.tardate.com/javascripts/jquery.js")) attr_dev(script0, "src", script0_src_value);
			attr_dev(script0, "type", "text/javascript");
			add_location(script0, file, 205, 2, 4793);
			if (!src_url_equal(script1.src, script1_src_value = "http://jtab.tardate.com/javascripts/raphael.js")) attr_dev(script1, "src", script1_src_value);
			attr_dev(script1, "type", "text/javascript");
			add_location(script1, file, 208, 2, 4896);
			if (!src_url_equal(script2.src, script2_src_value = "http://jtab.tardate.com/javascripts/jtab.js")) attr_dev(script2, "src", script2_src_value);
			attr_dev(script2, "type", "text/javascript");
			add_location(script2, file, 211, 2, 5000);
			attr_dev(section, "class", "svelte-15tqh3r");
			add_location(section, file, 216, 0, 5115);
		},
		m: function mount(target, anchor) {
			append_hydration_dev(document_1.head, link);
			append_hydration_dev(document_1.head, script0);
			append_hydration_dev(document_1.head, script1);
			append_hydration_dev(document_1.head, script2);
			insert_hydration_dev(target, t, anchor);
			insert_hydration_dev(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(section, "dragover", prevent_default(/*dragover_handler*/ ctx[17]), false, true, false),
					listen_dev(section, "drop", prevent_default(/*removeStrum*/ ctx[11]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(section, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(link);
			detach_dev(script0);
			detach_dev(script1);
			detach_dev(script2);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);
			if_blocks[current_block_type_index].d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const dragstart_handler_1 = e => e.dataTransfer.setData("direction", "down");
const dragstart_handler_2 = e => e.dataTransfer.setData("direction", "up");

function instance($$self, $$props, $$invalidate) {
	let $location;
	validate_store(location, 'location');
	component_subscribe($$self, location, $$value => $$invalidate(29, $location = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Lesson', slots, []);
	const urlParts = $location.split("/");
	const id = decodeURIComponent(urlParts[urlParts.length - 1]);
	let videoSearch;
	let addVideos;
	let lesson;
	let showVideo = 0;
	let selectedChord = "";
	let notes = "";
	let tab = "";

	async function addChord() {
		if (!selectedChord) {
			return;
		}

		try {
			if (lesson.chords) {
				$$invalidate(2, lesson.chords = [...lesson.chords, selectedChord], lesson);
			} else {
				$$invalidate(2, lesson.chords = [selectedChord], lesson);
			}

			$$invalidate(4, selectedChord = "");
			await updateLesson(lesson);
			renderChords();
		} catch(error) {
			console.error(error);
		}
	}

	async function deleteChord(chordPosition) {
		try {
			const newChords = [
				...lesson.chords.slice(0, chordPosition),
				...lesson.chords.slice(chordPosition + 1)
			];

			$$invalidate(2, lesson.chords = [...newChords], lesson);
			await updateLesson(lesson);
			renderChords();
		} catch(error) {
			console.error(error);
		}
	}

	async function addNotes(notes) {
		try {
			$$invalidate(2, lesson.notes = notes, lesson);
			await updateLesson(lesson);
		} catch(error) {
			console.error(error);
		}
	}

	async function handleDrop(e) {
		e.preventDefault();
		const direction = e.dataTransfer.getData("direction");

		if (lesson.strumming) {
			$$invalidate(2, lesson.strumming = [...lesson.strumming, direction], lesson);
		} else {
			$$invalidate(2, lesson.strumming = [direction], lesson);
		}

		await updateLesson(lesson);
		e.stopPropagation();
	}

	async function removeStrum(e) {
		const position = e.dataTransfer.getData("position");

		if (position && lesson.strumming) {
			$$invalidate(
				2,
				lesson.strumming = [
					...lesson.strumming.slice(0, position),
					...lesson.strumming.slice(parseInt(position) + 1)
				],
				lesson
			);
		}

		await updateLesson(lesson);
	}

	async function finish() {
		if ("finished" in lesson) {
			$$invalidate(2, lesson.finished = !lesson.finished, lesson);
		} else {
			$$invalidate(2, lesson.finished = true, lesson);
		}

		await updateLesson(lesson);
		push("/");
	}

	async function searchYoutube() {
		if (videoSearch && videoSearch.length > 3) {
			try {
				const res = await apiCall("https://www.googleapis.com/youtube/v3/search", {
					q: videoSearch,
					type: "video",
					key: "AIzaSyAViHdvitELO2-jct4oVozhk8Wq3hCkjRk",
					part: "snippet",
					maxResults: 7,
					topicId: "/m/04rlf"
				});

				$$invalidate(1, addVideos = res.items);
			} catch(error) {
				console.log(error.message);
			}
		}
	}

	async function updateTab() {
		$$invalidate(2, lesson.tab = tab, lesson);
		await updateLesson(lesson);
	}

	async function addVideo(videoID) {
		$$invalidate(2, lesson.videos = [...lesson.videos, videoID], lesson);
		$$invalidate(1, addVideos = null);
		await updateLesson(lesson);
	}

	function changeVideo(count) {
		if (lesson.videos.length > 1) {
			if (showVideo + count < 0) {
				$$invalidate(3, showVideo = lesson.videos.length - 1);
			} else if (showVideo + count > lesson.videos.length - 1) {
				$$invalidate(3, showVideo = 0);
			} else {
				$$invalidate(3, showVideo += count);
			}
		}
	}

	// async function addTab() {
	//   lesson.coordinates = [
	//     ...lesson.coordinates,
	//     [...new Array(6).keys()].reduce((acc, cV) => {
	//       acc[cV] = {};
	//       return acc;
	//     }, {}),
	//   ];
	//   await updateLesson(lesson);
	// }
	// async function deleteTab(position) {
	//   lesson.coordinates = [
	//     ...lesson.coordinates.slice(0, position),
	//     ...lesson.coordinates.slice(position + 1),
	//   ];
	//   await updateLesson(lesson);
	// }
	function renderChords() {
		if (lesson.chords?.length > 0) {
			lesson.chords.forEach((chord, i) => {
				jtab.render(document.getElementById(`chord-${i}`), chord);
			});
		}
	}

	onMount(() => {
		try {
			const stringifiedLessons = localStorage.getItem(LESSONS);
			const lessons = JSON.parse(stringifiedLessons);
			$$invalidate(2, lesson = lessons.find(lesson => lesson.id == id));
			$$invalidate(5, notes = lesson.notes);
			setTimeout(renderChords, 500);
		} catch(error) {
			console.error(error);
		}
	});

	const debouncedSearch = debounce(searchYoutube);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Lesson> was created with unknown prop '${key}'`);
	});

	function dragover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = video => addVideo(video.id.videoId);

	function input0_input_handler() {
		videoSearch = this.value;
		$$invalidate(0, videoSearch);
	}

	function input1_input_handler() {
		tab = this.value;
		$$invalidate(6, tab);
	}

	const click_handler_1 = () => changeVideo(-1);
	const click_handler_2 = () => changeVideo(1);

	function input2_input_handler() {
		selectedChord = this.value;
		$$invalidate(4, selectedChord);
	}

	const click_handler_3 = i => deleteChord(i);
	const dragstart_handler = (i, e) => e.dataTransfer.setData("position", i);

	function textarea_input_handler() {
		notes = this.value;
		$$invalidate(5, notes);
	}

	const change_handler = e => addNotes(e.target.value);

	$$self.$capture_state = () => ({
		onMount,
		location,
		push,
		apiCall,
		LESSONS,
		ARROW_SRC,
		debounce,
		updateLesson,
		VideoSnippet,
		LessonHeader,
		urlParts,
		id,
		videoSearch,
		addVideos,
		lesson,
		showVideo,
		selectedChord,
		notes,
		tab,
		addChord,
		deleteChord,
		addNotes,
		handleDrop,
		removeStrum,
		finish,
		searchYoutube,
		updateTab,
		addVideo,
		changeVideo,
		renderChords,
		debouncedSearch,
		$location
	});

	$$self.$inject_state = $$props => {
		if ('videoSearch' in $$props) $$invalidate(0, videoSearch = $$props.videoSearch);
		if ('addVideos' in $$props) $$invalidate(1, addVideos = $$props.addVideos);
		if ('lesson' in $$props) $$invalidate(2, lesson = $$props.lesson);
		if ('showVideo' in $$props) $$invalidate(3, showVideo = $$props.showVideo);
		if ('selectedChord' in $$props) $$invalidate(4, selectedChord = $$props.selectedChord);
		if ('notes' in $$props) $$invalidate(5, notes = $$props.notes);
		if ('tab' in $$props) $$invalidate(6, tab = $$props.tab);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		videoSearch,
		addVideos,
		lesson,
		showVideo,
		selectedChord,
		notes,
		tab,
		addChord,
		deleteChord,
		addNotes,
		handleDrop,
		removeStrum,
		finish,
		updateTab,
		addVideo,
		changeVideo,
		debouncedSearch,
		dragover_handler,
		dragover_handler_1,
		click_handler,
		input0_input_handler,
		input1_input_handler,
		click_handler_1,
		click_handler_2,
		input2_input_handler,
		click_handler_3,
		dragstart_handler,
		textarea_input_handler,
		change_handler
	];
}

class Lesson extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Lesson",
			options,
			id: create_fragment.name
		});
	}
}

export { Lesson as default };
//# sourceMappingURL=index-294d6b52.js.map
