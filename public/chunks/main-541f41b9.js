
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { w as writable, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, j as add_location, k as attr_dev, l as insert_hydration_dev, m as append_hydration_dev, n as noop, o as toggle_class, p as listen_dev, q as is_function, r as validate_each_argument, u as null_to_empty, x as destroy_each, y as add_render_callback, z as push, A as create_component, B as claim_component, C as mount_component, D as group_outros, E as transition_out, F as check_outros, G as transition_in, H as destroy_component, I as run_all, R as Router, J as wrap, K as onMount, L as globals } from './vendor-50685dc6.js';

const spotifyToken = writable();

const db = writable(
  window.indexedDB ||
    window.mozIndexedDB ||
    window.webkitIndexedDB ||
    window.msIndexedDB || { onerror: null }
);

/* src/pages/Home/index.svelte generated by Svelte v3.47.0 */

const file$5 = "src/pages/Home/index.svelte";

function create_fragment$5(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let t2;
	let t3;
	let section;
	let h2;
	let t4;
	let t5;
	let p1;
	let t6;
	let a;
	let t7;
	let t8;
	let t9;
	let p2;
	let t10;
	let t11;
	let p3;
	let t12;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Rad Guitar Practice Tool");
			t1 = space();
			p0 = element("p");
			t2 = text("Welcome to Raguprato. This rad guitar practice tool will help you improve your guitar\n  skills.");
			t3 = space();
			section = element("section");
			h2 = element("h2");
			t4 = text("How to use");
			t5 = space();
			p1 = element("p");
			t6 = text("This tool was designed to be as simple as possible. Just head over to the ");
			a = element("a");
			t7 = text("new lessons page");
			t8 = text(" to create a lesson for yourself and start practicing.");
			t9 = space();
			p2 = element("p");
			t10 = text("You can add videos, chords and strumming patterns to every lesson you create.");
			t11 = space();
			p3 = element("p");
			t12 = text("You don't need an account or a credit card. We value your privacy and safe your\n    lessons only locally in your browser.");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Rad Guitar Practice Tool");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t2 = claim_text(p0_nodes, "Welcome to Raguprato. This rad guitar practice tool will help you improve your guitar\n  skills.");
			p0_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h2 = claim_element(section_nodes, "H2", {});
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, "How to use");
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			p1 = claim_element(section_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "This tool was designed to be as simple as possible. Just head over to the ");
			a = claim_element(p1_nodes, "A", { href: true });
			var a_nodes = children(a);
			t7 = claim_text(a_nodes, "new lessons page");
			a_nodes.forEach(detach_dev);
			t8 = claim_text(p1_nodes, " to create a lesson for yourself and start practicing.");
			p1_nodes.forEach(detach_dev);
			t9 = claim_space(section_nodes);
			p2 = claim_element(section_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t10 = claim_text(p2_nodes, "You can add videos, chords and strumming patterns to every lesson you create.");
			p2_nodes.forEach(detach_dev);
			t11 = claim_space(section_nodes);
			p3 = claim_element(section_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t12 = claim_text(p3_nodes, "You don't need an account or a credit card. We value your privacy and safe your\n    lessons only locally in your browser.");
			p3_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$5, 0, 0, 0);
			attr_dev(p0, "class", "svelte-1pfs4fl");
			add_location(p0, file$5, 2, 0, 35);
			add_location(h2, file$5, 8, 2, 155);
			attr_dev(a, "href", "#/new-lesson");
			add_location(a, file$5, 11, 78, 260);
			attr_dev(p1, "class", "svelte-1pfs4fl");
			add_location(p1, file$5, 10, 2, 178);
			attr_dev(p2, "class", "svelte-1pfs4fl");
			add_location(p2, file$5, 14, 2, 373);
			attr_dev(p3, "class", "svelte-1pfs4fl");
			add_location(p3, file$5, 15, 2, 460);
			add_location(section, file$5, 7, 0, 143);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, h1, anchor);
			append_hydration_dev(h1, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, p0, anchor);
			append_hydration_dev(p0, t2);
			insert_hydration_dev(target, t3, anchor);
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, h2);
			append_hydration_dev(h2, t4);
			append_hydration_dev(section, t5);
			append_hydration_dev(section, p1);
			append_hydration_dev(p1, t6);
			append_hydration_dev(p1, a);
			append_hydration_dev(a, t7);
			append_hydration_dev(p1, t8);
			append_hydration_dev(section, t9);
			append_hydration_dev(section, p2);
			append_hydration_dev(p2, t10);
			append_hydration_dev(section, t11);
			append_hydration_dev(section, p3);
			append_hydration_dev(p3, t12);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Home', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
	});

	return [];
}

class Home extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Home",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/components/Navigation.svelte generated by Svelte v3.47.0 */

const file$4 = "src/components/Navigation.svelte";

// (9:4) {#if !show}
function create_if_block$1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "nav-button-line svelte-gtup2w");
			add_location(div, file$4, 9, 6, 222);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(9:4) {#if !show}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let button;
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let mounted;
	let dispose;
	let if_block = !/*show*/ ctx[0] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			button = element("button");
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			div1 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { "aria-label": true, class: true });
			var button_nodes = children(button);
			div2 = claim_element(button_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			children(div0).forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			children(div1).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "nav-button-line svelte-gtup2w");
			add_location(div0, file$4, 7, 4, 168);
			attr_dev(div1, "class", "nav-button-line svelte-gtup2w");
			add_location(div1, file$4, 11, 4, 268);
			attr_dev(div2, "class", "svelte-gtup2w");
			toggle_class(div2, "close", /*show*/ ctx[0]);
			add_location(div2, file$4, 6, 2, 139);
			attr_dev(button, "aria-label", "Navigation Button");
			attr_dev(button, "class", "nav-button svelte-gtup2w");
			add_location(button, file$4, 5, 0, 60);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, div2);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div2, t0);
			if (if_block) if_block.m(div2, null);
			append_hydration_dev(div2, t1);
			append_hydration_dev(div2, div1);

			if (!mounted) {
				dispose = listen_dev(
					button,
					"click",
					function () {
						if (is_function(/*toggle*/ ctx[1])) /*toggle*/ ctx[1].apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (!/*show*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div2, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*show*/ 1) {
				toggle_class(div2, "close", /*show*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Navigation', slots, []);
	let { show } = $$props;
	let { toggle } = $$props;
	const writable_props = ['show', 'toggle'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navigation> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('show' in $$props) $$invalidate(0, show = $$props.show);
		if ('toggle' in $$props) $$invalidate(1, toggle = $$props.toggle);
	};

	$$self.$capture_state = () => ({ show, toggle });

	$$self.$inject_state = $$props => {
		if ('show' in $$props) $$invalidate(0, show = $$props.show);
		if ('toggle' in $$props) $$invalidate(1, toggle = $$props.toggle);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [show, toggle];
}

class Navigation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { show: 0, toggle: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Navigation",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*show*/ ctx[0] === undefined && !('show' in props)) {
			console.warn("<Navigation> was created without expected prop 'show'");
		}

		if (/*toggle*/ ctx[1] === undefined && !('toggle' in props)) {
			console.warn("<Navigation> was created without expected prop 'toggle'");
		}
	}

	get show() {
		throw new Error("<Navigation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show(value) {
		throw new Error("<Navigation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get toggle() {
		throw new Error("<Navigation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggle(value) {
		throw new Error("<Navigation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/NavItems.svelte generated by Svelte v3.47.0 */

const file$3 = "src/components/NavItems.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].name;
	child_ctx[5] = list[i].path;
	child_ctx[6] = list[i].icon;
	return child_ctx;
}

// (14:2) {#each links as { name, path, icon }}
function create_each_block$1(ctx) {
	let li;
	let a;
	let i;
	let t0;
	let t1_value = /*name*/ ctx[4] + "";
	let t1;
	let a_class_value;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			i = element("i");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", {
				"aria-label": true,
				href: true,
				class: true
			});

			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(a_nodes);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "" + (null_to_empty(`fa fa-${/*icon*/ ctx[6]}`) + " svelte-xyqsnh"));
			add_location(i, file$3, 20, 8, 592);
			attr_dev(a, "aria-label", /*name*/ ctx[4]);
			attr_dev(a, "href", /*path*/ ctx[5]);
			attr_dev(a, "class", a_class_value = "" + (null_to_empty(`${/*header*/ ctx[0] ? "" : "fancy-link"} ${/*close*/ ctx[1] ? "modal-nav" : ""}`) + " svelte-xyqsnh"));
			add_location(a, file$3, 15, 6, 423);
			add_location(li, file$3, 14, 4, 412);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, i);
			append_hydration_dev(a, t0);
			append_hydration_dev(a, t1);
			append_hydration_dev(li, t2);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*header, close*/ 3 && a_class_value !== (a_class_value = "" + (null_to_empty(`${/*header*/ ctx[0] ? "" : "fancy-link"} ${/*close*/ ctx[1] ? "modal-nav" : ""}`) + " svelte-xyqsnh"))) {
				attr_dev(a, "class", a_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(14:2) {#each links as { name, path, icon }}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let ul;
	let ul_class_value;
	let each_value = /*links*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", ul_class_value = "" + (null_to_empty(/*header*/ ctx[0] ? "header" : "") + " svelte-xyqsnh"));
			add_location(ul, file$3, 12, 0, 332);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*links, header, close*/ 7) {
				each_value = /*links*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*header*/ 1 && ul_class_value !== (ul_class_value = "" + (null_to_empty(/*header*/ ctx[0] ? "header" : "") + " svelte-xyqsnh"))) {
				attr_dev(ul, "class", ul_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NavItems', slots, []);
	let { header = false } = $$props;
	let { close = null } = $$props;

	const links = [
		{ name: "Home", path: "/", icon: "home" },
		{
			name: "Lessons",
			path: "#/lessons",
			icon: "guitar"
		},
		{
			name: "Create new Lesson",
			path: "#/new-lesson",
			icon: "plus"
		},
		{
			name: "Links",
			path: "#/links",
			icon: "link"
		}
	];

	const writable_props = ['header', 'close'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NavItems> was created with unknown prop '${key}'`);
	});

	const click_handler = () => close?.();

	$$self.$$set = $$props => {
		if ('header' in $$props) $$invalidate(0, header = $$props.header);
		if ('close' in $$props) $$invalidate(1, close = $$props.close);
	};

	$$self.$capture_state = () => ({ header, close, links });

	$$self.$inject_state = $$props => {
		if ('header' in $$props) $$invalidate(0, header = $$props.header);
		if ('close' in $$props) $$invalidate(1, close = $$props.close);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [header, close, links, click_handler];
}

class NavItems extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { header: 0, close: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NavItems",
			options,
			id: create_fragment$3.name
		});
	}

	get header() {
		throw new Error("<NavItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set header(value) {
		throw new Error("<NavItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get close() {
		throw new Error("<NavItems>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set close(value) {
		throw new Error("<NavItems>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Header.svelte generated by Svelte v3.47.0 */
const file$2 = "src/components/Header.svelte";

// (14:4) {#if windowSize > 830}
function create_if_block_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Rad Guitar Practice Tool");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Rad Guitar Practice Tool");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-1ub782j");
			add_location(span, file$2, 14, 6, 362);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(14:4) {#if windowSize > 830}",
		ctx
	});

	return block;
}

// (20:2) {:else}
function create_else_block(ctx) {
	let navigation;
	let current;

	navigation = new Navigation({
			props: {
				show: /*showNav*/ ctx[1],
				toggle: /*func*/ ctx[4]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(navigation.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navigation.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navigation, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const navigation_changes = {};
			if (dirty & /*showNav*/ 2) navigation_changes.show = /*showNav*/ ctx[1];
			if (dirty & /*showNav*/ 2) navigation_changes.toggle = /*func*/ ctx[4];
			navigation.$set(navigation_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navigation.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navigation, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(20:2) {:else}",
		ctx
	});

	return block;
}

// (18:2) {#if windowSize > 750}
function create_if_block(ctx) {
	let navitems;
	let current;
	navitems = new NavItems({ props: { header: true }, $$inline: true });

	const block = {
		c: function create() {
			create_component(navitems.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(navitems.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(navitems, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(navitems.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navitems.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(navitems, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(18:2) {#if windowSize > 750}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let header;
	let div;
	let i;
	let t0;
	let span;
	let t1;
	let t2;
	let t3;
	let current_block_type_index;
	let if_block1;
	let t4;
	let nav;
	let navitems;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[2]);
	let if_block0 = /*windowSize*/ ctx[0] > 830 && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*windowSize*/ ctx[0] > 750) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	navitems = new NavItems({
			props: { close: /*func_1*/ ctx[5] },
			$$inline: true
		});

	const block = {
		c: function create() {
			header = element("header");
			div = element("div");
			i = element("i");
			t0 = space();
			span = element("span");
			t1 = text("raguprato");
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if_block1.c();
			t4 = space();
			nav = element("nav");
			create_component(navitems.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			div = claim_element(header_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			i = claim_element(div_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(div_nodes);
			span = claim_element(div_nodes, "SPAN", { role: true, class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "raguprato");
			span_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if (if_block0) if_block0.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(header_nodes);
			if_block1.l(header_nodes);
			header_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			claim_component(navitems.$$.fragment, nav_nodes);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fa fa-guitar svelte-1ub782j");
			add_location(i, file$2, 11, 4, 234);
			attr_dev(span, "role", "button");
			attr_dev(span, "class", "svelte-1ub782j");
			add_location(span, file$2, 12, 4, 265);
			attr_dev(div, "class", "slogan svelte-1ub782j");
			add_location(div, file$2, 10, 2, 209);
			attr_dev(header, "class", "svelte-1ub782j");
			add_location(header, file$2, 9, 0, 198);
			attr_dev(nav, "class", "svelte-1ub782j");
			toggle_class(nav, "show", /*showNav*/ ctx[1]);
			add_location(nav, file$2, 24, 0, 574);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, header, anchor);
			append_hydration_dev(header, div);
			append_hydration_dev(div, i);
			append_hydration_dev(div, t0);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t1);
			append_hydration_dev(div, t2);
			if (if_block0) if_block0.m(div, null);
			append_hydration_dev(header, t3);
			if_blocks[current_block_type_index].m(header, null);
			insert_hydration_dev(target, t4, anchor);
			insert_hydration_dev(target, nav, anchor);
			mount_component(navitems, nav, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "resize", /*onwindowresize*/ ctx[2]),
					listen_dev(span, "click", /*click_handler*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*windowSize*/ ctx[0] > 830) {
				if (if_block0) ; else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(header, null);
			}

			const navitems_changes = {};
			if (dirty & /*showNav*/ 2) navitems_changes.close = /*func_1*/ ctx[5];
			navitems.$set(navitems_changes);

			if (dirty & /*showNav*/ 2) {
				toggle_class(nav, "show", /*showNav*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(navitems.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			transition_out(navitems.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(header);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(nav);
			destroy_component(navitems);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Header', slots, []);
	let windowSize;
	let showNav = false;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		$$invalidate(0, windowSize = window.innerWidth);
	}

	const click_handler = () => push("/");
	const func = () => $$invalidate(1, showNav = !showNav);
	const func_1 = () => $$invalidate(1, showNav = false);

	$$self.$capture_state = () => ({
		push,
		Navigation,
		NavItems,
		windowSize,
		showNav
	});

	$$self.$inject_state = $$props => {
		if ('windowSize' in $$props) $$invalidate(0, windowSize = $$props.windowSize);
		if ('showNav' in $$props) $$invalidate(1, showNav = $$props.showNav);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [windowSize, showNav, onwindowresize, click_handler, func, func_1];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/components/Footer.svelte generated by Svelte v3.47.0 */

const file$1 = "src/components/Footer.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i].link;
	child_ctx[2] = list[i].symbol;
	return child_ctx;
}

// (26:4) {#each socialIcons as { link, symbol }}
function create_each_block(ctx) {
	let li;
	let a;
	let i;
	let t;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			i = element("i");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", {
				"aria-label": true,
				target: true,
				href: true,
				key: true,
				class: true
			});

			var a_nodes = children(a);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "" + (null_to_empty(`fab fa-${/*symbol*/ ctx[2]}`) + " svelte-1ob7gv2"));
			add_location(i, file$1, 28, 10, 845);
			attr_dev(a, "aria-label", /*symbol*/ ctx[2]);
			attr_dev(a, "target", "_blank");
			attr_dev(a, "href", /*link*/ ctx[1]);
			attr_dev(a, "key", /*symbol*/ ctx[2]);
			attr_dev(a, "class", "svelte-1ob7gv2");
			add_location(a, file$1, 27, 8, 770);
			add_location(li, file$1, 26, 6, 757);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, i);
			append_hydration_dev(li, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(26:4) {#each socialIcons as { link, symbol }}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let footer;
	let div;
	let span;
	let t0;
	let a0;
	let t1;
	let t2;
	let a1;
	let t3;
	let t4;
	let ul;
	let each_value = /*socialIcons*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			footer = element("footer");
			div = element("div");
			span = element("span");
			t0 = text("Created by\n      ");
			a0 = element("a");
			t1 = text("Gh05d");
			t2 = space();
			a1 = element("a");
			t3 = text("Down Arrow icon by Icons8");
			t4 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			footer = claim_element(nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			div = claim_element(footer_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Created by\n      ");
			a0 = claim_element(span_nodes, "A", { class: true, href: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Gh05d");
			a0_nodes.forEach(detach_dev);
			span_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			a1 = claim_element(div_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Down Arrow icon by Icons8");
			a1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(footer_nodes);
			ul = claim_element(footer_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "class", "fancy-link svelte-1ob7gv2");
			attr_dev(a0, "href", "https://github.com/Gh05d");
			add_location(a0, file$1, 20, 6, 528);
			add_location(span, file$1, 18, 4, 498);
			attr_dev(a1, "href", "https://icons8.com/icon/45289/down-arrow");
			attr_dev(a1, "class", "svelte-1ob7gv2");
			add_location(a1, file$1, 22, 4, 608);
			attr_dev(div, "class", "svelte-1ob7gv2");
			add_location(div, file$1, 17, 2, 488);
			attr_dev(ul, "class", "svelte-1ob7gv2");
			add_location(ul, file$1, 24, 2, 702);
			attr_dev(footer, "class", "svelte-1ob7gv2");
			add_location(footer, file$1, 16, 0, 477);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, footer, anchor);
			append_hydration_dev(footer, div);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t0);
			append_hydration_dev(span, a0);
			append_hydration_dev(a0, t1);
			append_hydration_dev(div, t2);
			append_hydration_dev(div, a1);
			append_hydration_dev(a1, t3);
			append_hydration_dev(footer, t4);
			append_hydration_dev(footer, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*socialIcons*/ 1) {
				each_value = /*socialIcons*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(footer);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Footer', slots, []);

	const socialIcons = [
		{
			link: "https://github.com/Gh05d",
			symbol: "github"
		},
		{
			link: "https://www.freecodecamp.org/gh05d",
			symbol: "free-code-camp"
		},
		{
			link: "https://www.linkedin.com/in/pascal-clanget-545956ba/",
			symbol: "linkedin"
		},
		{
			link: "https://stackoverflow.com/users/7490871/gh05d",
			symbol: "stack-overflow"
		},
		{
			link: "https://www.instagram.com/gh05d/?hl=de",
			symbol: "instagram"
		}
	];

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ socialIcons });
	return [socialIcons];
}

class Footer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footer",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/App.svelte generated by Svelte v3.47.0 */

const { console: console_1 } = globals;
const file = "src/App.svelte";

function create_fragment(ctx) {
	let div;
	let header;
	let t0;
	let main;
	let router;
	let t1;
	let footer;
	let current;
	header = new Header({ $$inline: true });

	router = new Router({
			props: { routes: /*routes*/ ctx[0] },
			$$inline: true
		});

	footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(header.$$.fragment);
			t0 = space();
			main = element("main");
			create_component(router.$$.fragment);
			t1 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(header.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			main = claim_element(div_nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			claim_component(router.$$.fragment, main_nodes);
			main_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			claim_component(footer.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(main, "class", "svelte-11hkqn3");
			add_location(main, file, 49, 2, 1450);
			attr_dev(div, "class", "wrapper svelte-11hkqn3");
			add_location(div, file, 46, 0, 1412);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(header, div, null);
			append_hydration_dev(div, t0);
			append_hydration_dev(div, main);
			mount_component(router, main, null);
			append_hydration_dev(div, t1);
			mount_component(footer, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(router.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(router.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(header);
			destroy_component(router);
			destroy_component(footer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	let dbStatus = "initialising";

	const routes = {
		"/": Home,
		"/links": wrap({
			asyncComponent: () => import('./index-ae22e62e.js')
		}),
		"/lessons": wrap({
			asyncComponent: () => import('./index-f317c109.js'),
			conditions: [() => dbStatus == "success"],
			loadingComponent: Loading,
			loadingParams: { text: "Loading lessons..." }
		}),
		"/lesson/:id": wrap({
			asyncComponent: () => import('./index-83d84eea.js')
		}),
		"/new-lesson": wrap({
			asyncComponent: () => import('./index-0760d780.js')
		})
	};

	console.log("HI");

	onMount(() => {
		const request = window.indexedDB.open("RagupratoDatabase", 1);

		request.onerror = () => {
			dbStatus = "error";
			console.log("Why didn't you allow my web app to use IndexedDB?!");
		};

		request.onsuccess = async event => {
			await db.update(d => {
				d = event.target.result;
				d.onerror = e => console.error("IndexedDB Error: ", e?.target);
				return d;
			});

			dbStatus = "success";
		};
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		db,
		onMount,
		Router,
		wrap,
		Home,
		Header,
		Footer,
		dbStatus,
		routes
	});

	$$self.$inject_state = $$props => {
		if ('dbStatus' in $$props) dbStatus = $$props.dbStatus;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [routes];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

const app = new App({
  target: document.body,
  hydrate: true,
});

export { app as a, db as d, spotifyToken as s };
//# sourceMappingURL=main-541f41b9.js.map
