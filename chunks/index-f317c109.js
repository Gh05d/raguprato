
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, M as validate_store, N as component_subscribe, v as validate_slots, K as onMount, L as globals, e as element, t as text, c as claim_element, b as children, f as claim_text, g as detach_dev, k as attr_dev, j as add_location, l as insert_hydration_dev, m as append_hydration_dev, O as set_data_dev, a as space, h as claim_space, p as listen_dev, P as prevent_default, n as noop, I as run_all, r as validate_each_argument, Q as empty, x as destroy_each, T as set_input_value, u as null_to_empty, o as toggle_class } from './vendor-50685dc6.js';
import { d as db } from './main-541f41b9.js';
import { L as LESSONS } from './helpers-518c23d6.js';

/* src/pages/Lessons/index.svelte generated by Svelte v3.47.0 */

const { Object: Object_1, console: console_1 } = globals;
const file = "src/pages/Lessons/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i].id;
	child_ctx[16] = list[i].title;
	child_ctx[17] = list[i].totalTime;
	child_ctx[18] = list[i].artist;
	child_ctx[19] = list[i].finished;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	return child_ctx;
}

// (206:2) {:else}
function create_else_block_1(ctx) {
	let div;
	let t0;
	let t1;
	let a;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("No lessons yet");
			t1 = space();
			a = element("a");
			t2 = text("Create a new One");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "No lessons yet");
			div_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t2 = claim_text(a_nodes, "Create a new One");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 206, 4, 5882);
			attr_dev(a, "href", "#/new-lesson");
			add_location(a, file, 207, 4, 5912);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, t0);
			insert_hydration_dev(target, t1, anchor);
			insert_hydration_dev(target, a, anchor);
			append_hydration_dev(a, t2);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(206:2) {:else}",
		ctx
	});

	return block;
}

// (153:2) {#if lessons && lessons.length > 0}
function create_if_block_1(ctx) {
	let div1;
	let input;
	let t0;
	let div0;
	let span;
	let t1;
	let t2;
	let t3;
	let ul;
	let t4;
	let button;
	let t5;
	let mounted;
	let dispose;
	let each_value_1 = /*sortOptions*/ ctx[6];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*filteredSongs*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			input = element("input");
			t0 = space();
			div0 = element("div");
			span = element("span");
			t1 = text("Sort By:");
			t2 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			button = element("button");
			t5 = text("Export Data");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			input = claim_element(div1_nodes, "INPUT", { placeholder: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			span = claim_element(div0_nodes, "SPAN", {});
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "Sort By:");
			span_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			ul = claim_element(nodes, "UL", {});
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t5 = claim_text(button_nodes, "Export Data");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "placeholder", "Filter Songs");
			add_location(input, file, 154, 6, 4118);
			add_location(span, file, 157, 8, 4200);
			attr_dev(div0, "class", "sort svelte-hr8yu7");
			add_location(div0, file, 156, 6, 4173);
			attr_dev(div1, "class", "filter-sort svelte-hr8yu7");
			add_location(div1, file, 153, 4, 4086);
			add_location(ul, file, 174, 4, 4782);
			add_location(button, file, 204, 4, 5817);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, input);
			set_input_value(input, /*value*/ ctx[1]);
			append_hydration_dev(div1, t0);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, span);
			append_hydration_dev(span, t1);
			append_hydration_dev(div0, t2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			insert_hydration_dev(target, t3, anchor);
			insert_hydration_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_hydration_dev(target, t4, anchor);
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t5);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[11]),
					listen_dev(button, "click", /*exportData*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
				set_input_value(input, /*value*/ ctx[1]);
			}

			if (dirty & /*sortOptions, sortOption*/ 68) {
				each_value_1 = /*sortOptions*/ ctx[6];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*deleteLesson, filteredSongs, computePracticeTime*/ 528) {
				each_value = /*filteredSongs*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(153:2) {#if lessons && lessons.length > 0}",
		ctx
	});

	return block;
}

// (161:10) {#each ["down", "up"] as direction}
function create_each_block_2(ctx) {
	let button;
	let i;
	let t;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[12](/*option*/ ctx[22], /*direction*/ ctx[25]);
	}

	const block = {
		c: function create() {
			button = element("button");
			i = element("i");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {
				"aria-label": true,
				title: true,
				class: true
			});

			var button_nodes = children(button);
			i = claim_element(button_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			t = claim_space(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "" + (null_to_empty(`fa-solid fa-arrow-${/*direction*/ ctx[25]}-a-z`) + " svelte-hr8yu7"));
			add_location(i, file, 167, 14, 4646);
			attr_dev(button, "aria-label", `Sort ${/*option*/ ctx[22]} a-z`);
			attr_dev(button, "title", `Sort ${/*option*/ ctx[22]} a-z`);
			attr_dev(button, "class", "naked-button svelte-hr8yu7");
			toggle_class(button, "button-active", /*sortOption*/ ctx[2] == `${/*option*/ ctx[22]}-${/*direction*/ ctx[25]}`);
			add_location(button, file, 161, 12, 4351);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, i);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*sortOption, sortOptions*/ 68) {
				toggle_class(button, "button-active", /*sortOption*/ ctx[2] == `${/*option*/ ctx[22]}-${/*direction*/ ctx[25]}`);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(161:10) {#each [\\\"down\\\", \\\"up\\\"] as direction}",
		ctx
	});

	return block;
}

// (159:8) {#each sortOptions as option}
function create_each_block_1(ctx) {
	let span;
	let t0_value = /*option*/ ctx[22] + "";
	let t0;
	let t1;
	let each_1_anchor;
	let each_value_2 = ["down", "up"];
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < 2; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 159, 10, 4271);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			append_hydration_dev(span, t0);
			insert_hydration_dev(target, t1, anchor);

			for (let i = 0; i < 2; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sortOptions, sortOption*/ 68) {
				each_value_2 = ["down", "up"];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < 2; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < 2; i += 1) {
					each_blocks[i].d(1);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(159:8) {#each sortOptions as option}",
		ctx
	});

	return block;
}

// (189:12) {:else}
function create_else_block(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", { title: true, class: true });
			children(i).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "title", "Start practicing");
			attr_dev(i, "class", "fa fa-hourglass-start");
			add_location(i, file, 189, 14, 5362);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(189:12) {:else}",
		ctx
	});

	return block;
}

// (185:31) 
function create_if_block_4(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", { title: true, class: true });
			children(i).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "title", "Keep goin. The way to mastery is long.");
			attr_dev(i, "class", "fa fa-hourglass-end");
			add_location(i, file, 185, 14, 5215);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, i, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(185:31) ",
		ctx
	});

	return block;
}

// (182:12) {#if totalTime}
function create_if_block_3(ctx) {
	let i;
	let t0;
	let t1_value = computePracticeTime(/*totalTime*/ ctx[17]) + "";
	let t1;

	const block = {
		c: function create() {
			i = element("i");
			t0 = space();
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", { title: true, class: true });
			children(i).forEach(detach_dev);
			t0 = claim_space(nodes);
			t1 = claim_text(nodes, t1_value);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "title", "Keep practicing");
			attr_dev(i, "class", "fa fa-hourglass-half");
			add_location(i, file, 182, 14, 5063);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, i, anchor);
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*filteredSongs*/ 16 && t1_value !== (t1_value = computePracticeTime(/*totalTime*/ ctx[17]) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(182:12) {#if totalTime}",
		ctx
	});

	return block;
}

// (193:10) {#if finished}
function create_if_block_2(ctx) {
	let i;

	const block = {
		c: function create() {
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			i = claim_element(nodes, "I", { title: true, class: true });
			children(i).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "title", "Congrats, you finished this lesson");
			attr_dev(i, "class", "fa fa-trophy svelte-hr8yu7");
			add_location(i, file, 193, 12, 5495);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, i, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(i);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(193:10) {#if finished}",
		ctx
	});

	return block;
}

// (176:6) {#each filteredSongs as { id, title, totalTime, artist, finished }}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*title*/ ctx[16] + "";
	let t0;
	let t1;
	let t2_value = /*artist*/ ctx[18] + "";
	let t2;
	let a_href_value;
	let t3;
	let div;
	let t4;
	let t5;
	let button;
	let i;
	let t6;
	let mounted;
	let dispose;

	function select_block_type_1(ctx, dirty) {
		if (/*totalTime*/ ctx[17]) return create_if_block_3;
		if (/*finished*/ ctx[19]) return create_if_block_4;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*finished*/ ctx[19] && create_if_block_2(ctx);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[13](/*id*/ ctx[15]);
	}

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = text(" - ");
			t2 = text(t2_value);
			t3 = space();
			div = element("div");
			if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			button = element("button");
			i = element("i");
			t6 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_text(a_nodes, " - ");
			t2 = claim_text(a_nodes, t2_value);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			div = claim_element(li_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block0.l(div_nodes);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(li_nodes);
			if (if_block1) if_block1.l(li_nodes);
			t5 = claim_space(li_nodes);
			button = claim_element(li_nodes, "BUTTON", { title: true, class: true });
			var button_nodes = children(button);
			i = claim_element(button_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			t6 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "fancy-link svelte-hr8yu7");
			attr_dev(a, "href", a_href_value = `#/lesson/${/*id*/ ctx[15]}`);
			add_location(a, file, 177, 10, 4899);
			attr_dev(div, "class", "time");
			add_location(div, file, 180, 10, 5002);
			attr_dev(i, "class", "fa fa-trash-alt");
			add_location(i, file, 199, 12, 5725);
			attr_dev(button, "title", "Delete Lesson");
			attr_dev(button, "class", "naked-button svelte-hr8yu7");
			add_location(button, file, 195, 10, 5591);
			attr_dev(li, "class", "lesson svelte-hr8yu7");
			add_location(li, file, 176, 8, 4869);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, t0);
			append_hydration_dev(a, t1);
			append_hydration_dev(a, t2);
			append_hydration_dev(li, t3);
			append_hydration_dev(li, div);
			if_block0.m(div, null);
			append_hydration_dev(li, t4);
			if (if_block1) if_block1.m(li, null);
			append_hydration_dev(li, t5);
			append_hydration_dev(li, button);
			append_hydration_dev(button, i);
			append_hydration_dev(li, t6);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_2, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*filteredSongs*/ 16 && t0_value !== (t0_value = /*title*/ ctx[16] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*filteredSongs*/ 16 && t2_value !== (t2_value = /*artist*/ ctx[18] + "")) set_data_dev(t2, t2_value);

			if (dirty & /*filteredSongs*/ 16 && a_href_value !== (a_href_value = `#/lesson/${/*id*/ ctx[15]}`)) {
				attr_dev(a, "href", a_href_value);
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, null);
				}
			}

			if (/*finished*/ ctx[19]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(li, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(176:6) {#each filteredSongs as { id, title, totalTime, artist, finished }}",
		ctx
	});

	return block;
}

// (216:2) {#if error}
function create_if_block(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*error*/ ctx[3]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*error*/ ctx[3]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "error");
			add_location(div, file, 216, 4, 6114);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*error*/ 8) set_data_dev(t, /*error*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(216:2) {#if error}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let h1;
	let t0;
	let t1;
	let button;
	let t2;
	let t3;
	let t4;
	let label;
	let t5;
	let input;
	let t6;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*lessons*/ ctx[0] && /*lessons*/ ctx[0].length > 0) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*error*/ ctx[3] && create_if_block(ctx);

	const block = {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			t0 = text("Click a Lesson to start practicing");
			t1 = space();
			button = element("button");
			t2 = text("UPDATE");
			t3 = space();
			if_block0.c();
			t4 = space();
			label = element("label");
			t5 = text("Import lessons: ");
			input = element("input");
			t6 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {});
			var section_nodes = children(section);
			h1 = claim_element(section_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Click a Lesson to start practicing");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			button = claim_element(section_nodes, "BUTTON", {});
			var button_nodes = children(button);
			t2 = claim_text(button_nodes, "UPDATE");
			button_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			if_block0.l(section_nodes);
			t4 = claim_space(section_nodes);
			label = claim_element(section_nodes, "LABEL", {});
			var label_nodes = children(label);
			t5 = claim_text(label_nodes, "Import lessons: ");
			input = claim_element(label_nodes, "INPUT", { accept: true, type: true });
			label_nodes.forEach(detach_dev);
			t6 = claim_space(section_nodes);
			if (if_block1) if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-hr8yu7");
			add_location(h1, file, 135, 2, 3466);
			add_location(button, file, 136, 2, 3512);
			attr_dev(input, "accept", ".json");
			attr_dev(input, "type", "file");
			add_location(input, file, 210, 21, 5994);
			add_location(label, file, 209, 2, 5966);
			add_location(section, file, 134, 0, 3454);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, h1);
			append_hydration_dev(h1, t0);
			append_hydration_dev(section, t1);
			append_hydration_dev(section, button);
			append_hydration_dev(button, t2);
			append_hydration_dev(section, t3);
			if_block0.m(section, null);
			append_hydration_dev(section, t4);
			append_hydration_dev(section, label);
			append_hydration_dev(label, t5);
			append_hydration_dev(label, input);
			append_hydration_dev(section, t6);
			if (if_block1) if_block1.m(section, null);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler*/ ctx[10], false, false, false),
					listen_dev(input, "change", prevent_default(/*importData*/ ctx[8]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(section, t4);
				}
			}

			if (/*error*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function computePracticeTime(totalTime) {
	const time = {
		d: Math.floor(totalTime / (60 * 60 * 24)),
		h: Math.floor(totalTime % (60 * 60 * 24) / 3600),
		m: Math.floor(totalTime % 3600 / 60),
		s: Math.floor(totalTime % 60)
	};

	return Object.keys(time).reduce(
		(acc, cV) => {
			return acc.concat(time[cV] ? `${time[cV]}${cV} ` : "");
		},
		""
	);
}

function instance($$self, $$props, $$invalidate) {
	let filteredSongs;
	let $db;
	validate_store(db, 'db');
	component_subscribe($$self, db, $$value => $$invalidate(5, $db = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Lessons', slots, []);
	let lessons;
	let error = null;
	let value = "";
	let sortOption = "Song-down";
	const sortOptions = ["Song", "Artist"];

	async function exportData() {
		try {
			const stringifiedLessons = localStorage.getItem(LESSONS);
			const blob = new Blob([stringifiedLessons], { type: "text/json" });
			const link = document.createElement("a");
			link.download = "lessons.json";
			link.href = window.URL.createObjectURL(blob);
			link.dataset.downloadurl = `text/json:${link.download}${link.href}`;

			const evt = new MouseEvent("click",
			{
					view: window,
					bubbles: true,
					cancelable: true
				});

			link.dispatchEvent(evt);
			link.remove();
		} catch(err) {
			$$invalidate(3, error = err.message);
		}
	}

	async function importData(e) {
		try {
			$$invalidate(3, error = null);
			const files = e.target.files;

			if (files.length == 0) {
				return;
			}

			const file = files[0];

			if (file.type != "application/json") {
				throw new Error("Only JSON files allowed!");
			}

			let reader = new FileReader();

			reader.onload = e => {
				const importedLessons = e.target.result;
				localStorage.setItem(LESSONS, importedLessons);
				renderLessons(importedLessons);
			};

			reader.onerror = e => {
				throw new Error(e.target.error.name);
			};

			reader.readAsText(file);
		} catch(err) {
			$$invalidate(3, error = err.message);
		}
	}

	function renderLessons(stringifiedLessons) {
		$$invalidate(0, lessons = JSON.parse(stringifiedLessons));

		lessons.sort((a, b) => {
			const titleA = a.title.toUpperCase(); // ignore upper and lowercase
			const titleB = b.title.toUpperCase(); // ignore upper and lowercase

			if (titleA < titleB) {
				return -1;
			} else if (titleA > titleB) {
				return 1;
			}

			// names must be equal
			return 0;
		});
	}

	function deleteLesson(id) {
		const newLessons = lessons.filter(lesson => lesson.id != id);
		$$invalidate(0, lessons = newLessons);
		localStorage.setItem(LESSONS, JSON.stringify(newLessons));
	}

	onMount(() => {
		console.log("WTF");
		console.info("FIRE--------->", $db);

		(async function setup() {
			const stringifiedLessons = await localStorage.getItem(LESSONS);

			if (stringifiedLessons) {
				renderLessons(stringifiedLessons);
			}
		})();
	});

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Lessons> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		const objectStore = $db.createObjectStore("lessons", { keyPath: "id" });
		objectStore.createIndex("title", "title", { unique: false });
		objectStore.createIndex("artist", "artist", { unique: false });

		objectStore.transaction.oncomplete = event => {
			const lessonStore = $db.transaction("lessons", "readwrite").objectStore("lessons");

			lessons.forEach(lesson => {
				lessonStore.add(lesson);
			});
		};
	};

	function input_input_handler() {
		value = this.value;
		$$invalidate(1, value);
	}

	const click_handler_1 = (option, direction) => $$invalidate(2, sortOption = `${option}-${direction}`);
	const click_handler_2 = id => deleteLesson(id);

	$$self.$capture_state = () => ({
		db,
		onMount,
		LESSONS,
		lessons,
		error,
		value,
		sortOption,
		sortOptions,
		computePracticeTime,
		exportData,
		importData,
		renderLessons,
		deleteLesson,
		filteredSongs,
		$db
	});

	$$self.$inject_state = $$props => {
		if ('lessons' in $$props) $$invalidate(0, lessons = $$props.lessons);
		if ('error' in $$props) $$invalidate(3, error = $$props.error);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('sortOption' in $$props) $$invalidate(2, sortOption = $$props.sortOption);
		if ('filteredSongs' in $$props) $$invalidate(4, filteredSongs = $$props.filteredSongs);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*lessons, sortOption, value*/ 7) {
			$$invalidate(4, filteredSongs = lessons?.sort((a, b) => {
				const [option, direction] = sortOption.split("-");
				const itemA = a[option == "Song" ? "title" : "artist"].toLowerCase();
				const itemB = b[option == "Song" ? "title" : "artist"].toLowerCase();

				if (itemA < itemB) {
					return direction == "up" ? 1 : -1;
				}

				if (itemA > itemB) {
					return direction == "up" ? -1 : 1;
				}

				return 0;
			}).filter(lesson => lesson.title?.toLowerCase().includes(value)) || []);
		}
	};

	return [
		lessons,
		value,
		sortOption,
		error,
		filteredSongs,
		$db,
		sortOptions,
		exportData,
		importData,
		deleteLesson,
		click_handler,
		input_input_handler,
		click_handler_1,
		click_handler_2
	];
}

class Lessons extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Lessons",
			options,
			id: create_fragment.name
		});
	}
}

export { Lessons as default };
//# sourceMappingURL=index-f317c109.js.map
